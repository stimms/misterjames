<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[They Call Me Mister James]]></title>
  <subtitle><![CDATA[Building the Web and Other Musings]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://jameschambers.com/"/>
  <updated>2016-11-12T15:36:25.466Z</updated>
  <id>http://jameschambers.com/</id>
  
  <author>
    <name><![CDATA[James Chambers]]></name>
    <email><![CDATA[james@jameschambers.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Five Days of Azure Functions]]></title>
    <link href="http://jameschambers.com/2016/11/Five-Days-of-Azure-Functions/"/>
    <id>http://jameschambers.com/2016/11/Five-Days-of-Azure-Functions/</id>
    <published>2016-11-11T21:03:50.000Z</published>
    <updated>2016-11-12T15:36:25.466Z</updated>
    <content type="html"><![CDATA[<p>I’m exploring the how-to’s in Azure Functions that go beyond hello world.  I’m going to take the next five days to cover some interesting scenarios that I know I will find useful in my upcoming projects and hope that you can find value in it, too.  </p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/11/the-functions-are-coming.png" alt="Azure Functions"></p>
<a id="more"></a>
<h2 id="Here_u2019s_the_topics"><a href="#Here_u2019s_the_topics" class="headerlink" title="Here’s the topics"></a>Here’s the topics</h2><ul>
<li>Day 1: How to organize types in your scripts (First Up!)</li>
<li>Day 2: How to resize an image uploaded to Azure Blog Storage (Coming soon)</li>
<li>Day 3: How to &quot;fan out&quot; work so your Functions can scale (Coming soon)</li>
<li>Day 4: How to deploy to Azure Functions using GitHub (Coming soon)</li>
<li>Day 5: How to import third-party libraries (Coming soon)</li>
</ul>

<h2 id="What_you_need_to_know"><a href="#What_you_need_to_know" class="headerlink" title="What you need to know"></a>What you need to know</h2><p><strong>Azure Functions are built on the Web Jobs SDK</strong> which is a proven base that has matured over the last few years. It differs in that you can opt to use a “dynamic” pricing model rather than the “App Service” model. This is important, as you can now be billed per “gigabyte second”, a new, ridiculously small unit of measure that clocks down to the milisecond. </p>
<p><strong>c# support is provided through .csx files</strong> which helps eliminate some of the cruft of projects, but introduces other limitations. Things like dependency injection aren’t supported yet, and there is a little more legwork in getting third-party binaries up and available in your </p>
<p><strong>Some libraries are preloaded to make things easy</strong> and others are hot in Azure so you can reference them without having to pull in libraries manually. </p>
<p>Here are the namespaces that are included in all your scripts by default. These namespaces are imported by default and are available as though you’ve already put the namespaces in <code>using</code> statements:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Azure.WebJobs&#10;Microsoft.Azure.WebJobs.Host&#10;System&#10;System.Collections.Generic&#10;System.IO&#10;System.Linq&#10;System.Net.Http&#10;System.Threading.Tasks</span><br></pre></td></tr></table></figure></p>
<p>These .NET Framework assemblies are also available, but you’ll have to add a <code>using</code> for any types you wish to use in your functions.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mscorlib&#10;Microsoft.Azure.WebJobs.Extensions&#10;System.Core&#10;System.Net.Http.Formatting&#10;System.Web.Http&#10;System.Xml</span><br></pre></td></tr></table></figure></p>
<p>There are other assemblies that are “hot” in the environment and can easily be brought into your scripts. If you want to take a dependency on a types in these libraries you need to reference them in your script:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.AspNEt.WebHooks.Common&#10;Microsoft.AspNet.WebHooks.Receivers&#10;Microsoft.Azure.NotificationHubs&#10;Microsoft.ServiceBus&#10;Microsoft.WindowsAzure.Storage&#10;Newtonsoft.Json</span><br></pre></td></tr></table></figure></p>
<p>To create the reference to a library in your scripts, say for <code>Newtonsoft.Json</code>, use the following statement at the top of your script:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#r &#34;Newtonsoft.Json&#34;</span><br></pre></td></tr></table></figure></p>
<p>Then you can add an appropriate <code>using</code> statement and use it’s types.</p>
<p><strong>ASP.NET Core is not yet supported in Azure Functions</strong> but support is on the way. This is a priority for the team and they are working hard on getting ASP.NET Core support, but there are still dependencies on too many libraries that are not yet ported to Core, as evidenced by the automatically “known” libraries that are included in Functions.  </p>
<h2 id="For_more_of_the_basics_u2026"><a href="#For_more_of_the_basics_u2026" class="headerlink" title="For more of the basics…"></a>For more of the basics…</h2><p>You can find more of the basics covered on the Azure Functions <a href="https://azure.microsoft.com/en-us/documentation/articles/functions-overview/" target="_blank" rel="external">documentation website</a>, but if you’re comfortable with the above, feel free to browse the articles in this series for some real-world ways to leverage Azure Functions.</p>
<h2 id="Here_u2019s_the_topics-1"><a href="#Here_u2019s_the_topics-1" class="headerlink" title="Here’s the topics"></a>Here’s the topics</h2><ul>
<li>Day 1: How to organize types in your scripts (Next)</li>
<li>Day 2: How to resize an image uploaded to Azure Blog Storage (Coming soon)</li>
<li>Day 3: How to “fan out” work so your Functions can scale (Coming soon)</li>
<li>Day 4: How to deploy to Azure Functions using GitHub (Coming soon)</li>
<li>Day 5: How to import third-party libraries (Coming soon)</li>
</ul>
<p>Would you like to see more? Suggest an Azure Function topic in the comments below or ping me on the Twitters.</p>
<p>Happy Coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’m exploring the how-to’s in Azure Functions that go beyond hello world.  I’m going to take the next five days to cover some interesting scenarios that I know I will find useful in my upcoming projects and hope that you can find value in it, too.  </p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/11/the-functions-are-coming.png" alt="Azure Functions"></p>]]>
    
    </summary>
    
      <category term="Azure Functions" scheme="http://jameschambers.com/tags/Azure-Functions/"/>
    
      <category term="c#" scheme="http://jameschambers.com/tags/c/"/>
    
      <category term="Development" scheme="http://jameschambers.com/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bending ASP.NET Core MVC To Your Will]]></title>
    <link href="http://jameschambers.com/2016/09/Bending-ASP-NET-MVC-Core-To-Your-Will/"/>
    <id>http://jameschambers.com/2016/09/Bending-ASP-NET-MVC-Core-To-Your-Will/</id>
    <published>2016-09-09T17:46:34.000Z</published>
    <updated>2016-09-13T13:15:01.665Z</updated>
    <content type="html"><![CDATA[<p>The default conventions of ASP.NET Core MVC allow us to easily construct applications without having to worry about the minutiae of wiring up the “how-to” parts that are required in nearly every application that will be built.  There are times when these conventions do not meet your application needs, but you can instruct the framework to work the way you need it to by building your own.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/09/bunnies-are-good-at-multiplying.png" alt="Bring Your Own Conventions"></p>
<a id="more"></a>
<h2 id="Understanding_The_Current_Conventions"><a href="#Understanding_The_Current_Conventions" class="headerlink" title="Understanding The Current Conventions"></a>Understanding The Current Conventions</h2><p>If you’ve worked inside of the MVC Framework you’ve either explicitly noticed or been implicitly subjected to some of the conventions at work. These include things like:</p>
<ul>
<li>Names of methods in the startup class</li>
<li>Project layout </li>
<li>View search locations</li>
<li>Routing expressions as they relate to controller and action names</li>
<li>Web API exposing actions that are named as HTTP verbs</li>
</ul>
<p>These conventions work to remove some of the effort we need to get our application running. Some of them are locked in - we can’t change the names of methods that are invoked in the startup class, for instance, as there is an explicit search for <code>Configure</code> and <code>ConfigureServices</code> - but others can be ammended, removed, and replaced on our whim.</p>
<p>There are four categories of conventions that we’re going to briefly discuss here:</p>
<table>
<thead>
<tr>
<th>Convention</th>
<th>Interface</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Application (Widest net)</td>
<td><code>IApplicationModelConvention</code></td>
<td>Provides access to application-wide conventions, allowing you to iterate over each of the levels below.</td>
</tr>
<tr>
<td>Controller</td>
<td><code>IControllerModelConvention</code></td>
<td>Conventions that are specific to a controller, but also allows you to evaluate lower levels.</td>
</tr>
<tr>
<td>Action</td>
<td><code>IActionModelConvention</code></td>
<td>Changes to action-level conventions can be made here, as well as on any parameters of the actions.</td>
</tr>
<tr>
<td>Parameter (Smallest scope)</td>
<td><code>IParameterModelConvention</code></td>
<td>Specific to parameters only.</td>
</tr>
</tbody>
</table>
<p>As your application loads it will use any conventions that you have added starting at the outter-most field of view, application conventions, then working it’s way in through controller and action conventions to parameter conventions. In this way, the most specific conventions are applied last, meaning there is a caveat that if you add a parameter convention by using <code>IControllerModelConvention</code> then it could be overwritten by any <code>IParameterModelConvention</code>, regardless of the order in which you add the conventions to the project. This is different from middleware, in a sense, because the order of conventions only applies within the same level, and there is a priority on level that you can’t adjust.</p>
<h2 id="Building_Your_Own_Conventions"><a href="#Building_Your_Own_Conventions" class="headerlink" title="Building Your Own Conventions"></a>Building Your Own Conventions</h2><p>I wanted to build a convention that celebrated how great rabbits were at math, specifically, multiplication. You know those rabbits! What I did first was to create an interface:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface IAmRabbit &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>…so that I could use it in an attribute:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class RabbitControllerAttribute : Attribute, IAmRabbit &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>…which allowed me to apply the attribute to my controller:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[RabbitController]&#10;public class HomeController : Controller&#10;&#123;  &#10;  // ...&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>…so that I could leverage the attribute in my convention:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class RabbitConvention : IControllerModelConvention&#10;&#123;&#10;    public void Apply(ControllerModel controller)&#10;    &#123;&#10;        if (IsConventionApplicable(controller))&#10;        &#123;&#10;            var multipliedActions = new List&#60;ActionModel&#62;();&#10;&#10;            foreach (var action in controller.Actions)&#10;            &#123;&#10;                var existingAction = action;&#10;&#10;                var bunnyAction = new ActionModel(existingAction);&#10;                bunnyAction.ActionName = $&#34;Bunny&#123;bunnyAction.ActionName&#125;&#34;;&#10;                &#10;                multipliedActions.Add(bunnyAction);&#10;            &#125;&#10;            foreach (var action in multipliedActions)&#10;            &#123;&#10;                controller.Actions.Add(action);&#10;            &#125;&#10;        &#125;&#10;    &#125;&#10;&#10;    private bool IsConventionApplicable(ControllerModel controller)&#10;    &#123;&#10;        return controller.Attributes.OfType&#60;IAmRabbit&#62;().Any();&#10;    &#125;&#10;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>Now, the great math capabilities of bunnies are available! I loop through all the actions on my controller and create a cloned version of the action with the prefix <code>Bunny</code>. So there will be an <code>Index</code> action and a <code>BunnyIndex</code> and so forth at runtime. Now, you may think that this isn’t too relevant at first glance, so I’ll leave it as an excercise to the reader to think about how Web API actions might be handled <em>by convention</em> when you have action names that are verbs.   </p>
<h2 id="Wiring_Up_Your_Application_With_Custom_Conventions"><a href="#Wiring_Up_Your_Application_With_Custom_Conventions" class="headerlink" title="Wiring Up Your Application With Custom Conventions"></a>Wiring Up Your Application With Custom Conventions</h2><p>Wiring up the convention is easy…just add it to the conventions collection when you’re adding MVC in the <code>ConfigureServices</code> method in <code>Startup</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)&#10;&#123;&#10;    // Add framework services.&#10;    services.AddMvc(options =&#62;&#10;        &#123;&#10;            options.Conventions.Add(new RabbitConvention());&#10;        &#125;&#10;    );            &#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Next_Steps_and_Further_Reading"><a href="#Next_Steps_and_Further_Reading" class="headerlink" title="Next Steps and Further Reading"></a>Next Steps and Further Reading</h2><p>Here are some great resources that will help you explore other uses of these interfaces.</p>
<p><strong>Filip Wojcieszyn’s Posts and Community Contributions</strong></p>
<ul>
<li><a href="https://github.com/filipw/Strathweb.TypedRouting.AspNetCore" target="_blank" rel="external">Typed Routing</a></li>
<li><a href="http://www.strathweb.com/2015/11/localized-routes-with-asp-net-5-and-mvc-6/" target="_blank" rel="external">Localized Routes</a></li>
<li><a href="http://www.strathweb.com/2015/03/strongly-typed-routing-asp-net-mvc-6-iapplicationmodelconvention/" target="_blank" rel="external">Application Model Conventions</a></li>
<li><a href="http://www.strathweb.com/2016/06/global-route-prefix-with-asp-net-core-mvc-revisited/" target="_blank" rel="external">Route Prefixes</a></li>
</ul>
<p><strong>Steve Smith’s article on feature folders</strong></p>
<ul>
<li><a href="https://msdn.microsoft.com/magazine/mt763233" target="_blank" rel="external">Feature Folders on MSDN</a></li>
</ul>
<p>As you can see, you are not locked into the default behaviours of ASP.NET Core MVC, and you have many surface areas acting as cusomization points for you to exploit.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The default conventions of ASP.NET Core MVC allow us to easily construct applications without having to worry about the minutiae of wiring up the “how-to” parts that are required in nearly every application that will be built.  There are times when these conventions do not meet your application needs, but you can instruct the framework to work the way you need it to by building your own.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/09/bunnies-are-good-at-multiplying.png" alt="Bring Your Own Conventions"></p>]]>
    
    </summary>
    
      <category term="ASP.NET Core MVC" scheme="http://jameschambers.com/tags/ASP-NET-Core-MVC/"/>
    
      <category term="Web API" scheme="http://jameschambers.com/tags/Web-API/"/>
    
      <category term="Development" scheme="http://jameschambers.com/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitHub Authentication with ASP.NET Core]]></title>
    <link href="http://jameschambers.com/2016/04/github-authentication-asp-net-core/"/>
    <id>http://jameschambers.com/2016/04/github-authentication-asp-net-core/</id>
    <published>2016-04-26T12:12:54.000Z</published>
    <updated>2016-04-27T13:39:39.201Z</updated>
    <content type="html"><![CDATA[<p>Authentication has changed over the years, and my take on it has surely shifted. No longer is it the scary, intimidating beastie that must be overcome on our projects. Today, we can let external providers provide the authentication mechanisms, giving the user with a streamlined experience that can give them access to our application with previuosly defined credentials.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/04/github-auth.png" alt="GitHub Authentication in ASP.NET Core"></p>
<p>Let’s have a look at what it takes to allow users to authenticate in our application using GitHub as the login source, and you can check out the Monsters video take of this on <a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-26-GitHub-Authentication-in-ASPNET-Core" target="_blank" rel="external">Channel 9</a>.</p>
<a id="more"></a>
<h2 id="Background_and_Overview"><a href="#Background_and_Overview" class="headerlink" title="Background and Overview"></a>Background and Overview</h2><p>OAuth has been known as a complicated spec to adhere to, and this is further perpetuated by the fact that while much of the mechanics are the same among authentication providers, the implementation of how one retrieves information about the logged in user is different from source-to-source.</p>
<p>The security repo for ASP.NET gives us some pretty good options for the big, wider market plays like Facebook and Twitter, but there is aren’t - nor can or should there be - packages for every provider. GitHub is appealing as a source when we target other developers, and while it lacks a package of its own, we can leverage the raw OAuth provider and implement the user profile loading details on our own. </p>
<p>In short, the steps are as follows:</p>
<ol>
<li>Install the <code>Microsoft.AspNet.Authentication.OAuth</code> package</li>
<li>Register you application in GitHub</li>
<li>Configurate the OAuth parameters in your application</li>
<li>Enable the OAuth middleware</li>
<li>Retrieve the claims for the user</li>
</ol>
<p>Okay, now let’s dive into the nitty gritty of it.</p>
<h2 id="Install_the_Package"><a href="#Install_the_Package" class="headerlink" title="Install the Package"></a>Install the Package</h2><p>First step is a gimme.  Just head into your <code>project.json</code> and add the package to the list of dependencies in your application.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;Microsoft.AspNet.Authentication.OAuth&#34;: &#34;1.0.0-rc1-final&#34;,</span><br></pre></td></tr></table></figure>
<p>You can see here that I am on RC1, so assume there may still be some changes to the naming and, obviously, the version of the package you’ll want to use.</p>
<h2 id="Create_the_App_in_GitHub"><a href="#Create_the_App_in_GitHub" class="headerlink" title="Create the App in GitHub"></a>Create the App in GitHub</h2><p>Pull down the user account menu from your avatar in the top-right corner of GitHub, then select Settings. Next, go to the OAuth Applications section and create a new application. This is pretty straightforward, but it’s worth pointing out a few things.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/04/github-app.png" alt="Creating an OAuth app in GitHub"></p>
<p>First, you’ll need to note your client ID and secret, or minimally, you’ll want to leave the browser window open. </p>
<p>Second you’ll see that I have a authorization callback setup in the app as follows:</p>
<p><code>https://localhost:44363/signin-github</code></p>
<p>This is important for two reasons: </p>
<ol>
<li>This will only work locally on your machine</li>
<li>The <code>signin-github</code> bit will need to be configured in our middleware</li>
</ol>
<p>If you want better control over how that is configured in your application, you can incorporate the appropriate settings into your configuration files, but you’ll also need to update your GitHub app. This process is still relevant - you’ll likely want something to test with locallying without having to deploy to test your application.</p>
<h2 id="Configure_Your_Client_ID_and_Secret"><a href="#Configure_Your_Client_ID_and_Secret" class="headerlink" title="Configure Your Client ID and Secret"></a>Configure Your Client ID and Secret</h2><p>  For production applications you’ll be fine to set environment variables or configure application settings in Azure (which are loaded as env vars), but locally you’ll want access to the config as well. You can setup <a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-23-Working-With-Sensitive-Data-User-Secrets" target="_blank" rel="external">user secrets via the command line</a>, or you can just right-click on your project in Visual Studio 2015 and select “Manage User Secrets”. From there, you set it up like so:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;  &#34;GitHub:ClientId&#34;: &#34;your_id&#34;,&#10;  &#34;GitHub:ClientSecret&#34;: &#34;your_secret&#34;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Enable_OAuth_Middleware"><a href="#Enable_OAuth_Middleware" class="headerlink" title="Enable OAuth Middleware"></a>Enable OAuth Middleware</h2><p>In the above code we also wired up some code to fire during the <code>OnCreatingTicket</code> event, so let’s implement that next.  To do this, we’ll add the middleare to the <code>Configure</code> method in our startup class, and add a property to the class to expose our desired settings.</p>
<p>The middleware call is like so:<br><code>app.UseOAuthAuthentication(GitHubOptions);</code></p>
<p>And we create the property as such:</p>
<script src="https://gist.github.com/MisterJames/746331337329ca50556cbff19a0ba176.js"></script>

<p>Remember that callback path that we setup on GitHub, you’ll see it again in our settings above. You’ll also note that we’re retrieving our client ID and secret from our configuration, and that we’re setting up a handler when the auth ticket is created so that we can go fetch additional details about the authenticating party.</p>
<h2 id="Retrieve_the_User_u2019s_Claims"><a href="#Retrieve_the_User_u2019s_Claims" class="headerlink" title="Retrieve the User’s Claims"></a>Retrieve the User’s Claims</h2><p>We’ll have to call back out to GitHub to get the user’s details, they don’t come back with the base calls for authentication. This is the part that is different for each provider, and thus you’ll need to write this part for yourself if you wish to use an alternate source for authentication.</p>
<p>We will add two parts to this; the first will call out to get the information about the user, the second will parse the result to extract the claims. Both of these can live in your <code>startup.cs</code> class.</p>
<script src="https://gist.github.com/MisterJames/6a2ee9918afa9019aa3c1891f216102a.js"></script>

<script src="https://gist.github.com/MisterJames/c818ad44950d1c7312e2d36b93041407.js"></script>

<p>Unfortunately the base implementation of the OAuth provider does not support allowing us to request additional fields for the user; I’ll take a look at that in a future post. All you’re going to get are the basics with the above - so none of the account details beyond the email addres, nor ability to work with their repos/issues/PRs.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>There you have it. All the chops you need to start exercising your OAuth muscle, and a basic implementation that you can leverage as a starting point. Trying this out will take you about 15 minutes, start to finish, provided you already have a GitHub account.</p>
<ol>
<li><a href="https://get.asp.net/" target="_blank" rel="external">Get the latest VS 2015 and ASP.NET Core bits</a></li>
<li><a href="https://github.com/aspnet/security" target="_blank" rel="external">Explore the ASP.NET security repo on GitHub</a></li>
<li>Run through the samples above.</li>
</ol>
<p>Finally, check out the Monsters’ video on Channel 9 where I code this live.</p>
<iframe src="https://channel9.msdn.com/Series/aspnetmonsters/Episode-26-GitHub-Authentication-in-ASPNET-Core/player" width="640" height="360" allowfullscreen frameborder="0"></iframe>

<p>Happy Coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Authentication has changed over the years, and my take on it has surely shifted. No longer is it the scary, intimidating beastie that must be overcome on our projects. Today, we can let external providers provide the authentication mechanisms, giving the user with a streamlined experience that can give them access to our application with previuosly defined credentials.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/04/github-auth.png" alt="GitHub Authentication in ASP.NET Core"></p>
<p>Let’s have a look at what it takes to allow users to authenticate in our application using GitHub as the login source, and you can check out the Monsters video take of this on <a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-26-GitHub-Authentication-in-ASPNET-Core">Channel 9</a>.</p>]]>
    
    </summary>
    
      <category term="Authentication" scheme="http://jameschambers.com/tags/Authentication/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Development" scheme="http://jameschambers.com/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[If You Want to Get Into OSS, Consider This Project]]></title>
    <link href="http://jameschambers.com/2016/03/If-You-Want-to-Get-Into-OSS-Consider-This-Project/"/>
    <id>http://jameschambers.com/2016/03/If-You-Want-to-Get-Into-OSS-Consider-This-Project/</id>
    <published>2016-03-13T00:24:44.000Z</published>
    <updated>2016-03-13T00:59:59.835Z</updated>
    <content type="html"><![CDATA[<p>AllReady is an in-production piece of software build on ASP.NET Core that helps to alleviate the challenges of planning disaster-preparedness campaigns, co-ordinating volunteers and executing activities at scale. There are tasks for all levels of developers, designers and folks with expertise in humanitarian relief efforts. </p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/03/allready-running.PNG" alt="HTBox&#39;s AllReady Application"></p>
<a id="more"></a>
<p>The tech stack is awesome, next-gen and constantly under refinement. It’s a blast to work on and you’ll get input directly from industry leaders, Microsoft MVPs and at times from members of the ASP.NET team from Redmond.  </p>
<p><img style="float:right; margin-left:10px;" src="https://jcblogimages.blob.core.windows.net:443/img/2016/03/ht-logo.png">This is what we’re building on:</p>
<ul>
<li>Visual Studio 2015</li>
<li>ASP.NET Core, Core MVC and Core Web API</li>
<li>Azure Web Apps (Sites and Jobs)</li>
<li>Azure Storage (Tables and Queues)</li>
<li>AutoFac as the IoC container</li>
<li>MediatR for messaging &amp; pub/sub provider</li>
<li>Entity Framework 7</li>
<li>GitHub and AppVeyor</li>
<li>SendGrid and Twilio</li>
<li>xUnit for testing</li>
</ul>
<p>That’s cool stuff. And here’s a little bit more about the software’s intent from the website:</p>
<blockquote>
<p>Preparedness campaigns are powered by neighbors helping neighbors and volunteers who give their time to strengthen their communities. allReady allows campaign coordinators to engage, contact and connect volunteers with the that need to be delivered.</p>
</blockquote>
<h1 id="Working_for_the_Greater_Good_with_Code"><a href="#Working_for_the_Greater_Good_with_Code" class="headerlink" title="Working for the Greater Good with Code"></a>Working for the Greater Good with Code</h1><p>For me, this has been an incredible opportunity to really make a difference doing something that I am good at. When I’ve been involved in other efforts, it’s always meant putting down my toolkit and the skills I have as a software developer in order to help in other ways.  And that’s been great! But as a contributor to AllReady, I get the opportunity to help build software that will help people, that can strengthen communities and make a difference in a meaningful way.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/03/code-a-thon-standup.PNG" alt="Our Weekly Standup - This Time During the Global Code-A-Thon"></p>
<h1 id="The_Humanitarian_Toolbox"><a href="#The_Humanitarian_Toolbox" class="headerlink" title="The Humanitarian Toolbox"></a>The Humanitarian Toolbox</h1><p>Also known as HTBox, The Humanitarian Toolbox is a registered charity unlike most others. Rather than accepting donations to find a cure for a disease or support operating costs, HTBox uses its funds alongside volunteer efforts from the development community and input from internationally recognized leaders in humanitarian efforts. They do this to hone in on two different types of expertise:</p>
<ol>
<li>Software architecture, engineering and development</li>
<li>Operational expertise in humanitarian works</li>
</ol>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image.png" alt="Heads Down in Redmond at the November 2015 Code-A-Thon"></p>
<p>Their mission is to build open source software, freely available to any organization that can leverage it in order to relieve poverty, assist in crisis management and even save lives. HTBox operates on the following principle:</p>
<blockquote>
<p><em>The Next Big Storm is a Coding Challenge.</em> We are developers, designers, testers, and industry professionals who want to contribute our unique skills in disaster relief aid. Whether it is through creating apps that map the spread of disease or maintaining software that helps to optimize the delivery of relief supplies, Humanitarian Toolbox has a goal of creating software and programs for relief organizations to have ready in times of need.</p>
</blockquote>
<p>That’s a pretty lofty goal. So how are they going to get there?</p>
<h1 id="What_u2019s_Been_Done_So_Far"><a href="#What_u2019s_Been_Done_So_Far" class="headerlink" title="What’s Been Done So Far"></a>What’s Been Done So Far</h1><p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/03/allready-pulse.PNG" alt="The Last Month&#39;s Pulse on AllReady"></p>
<p>Considering this incarnation of the project has only been around for less than a year with no paid staff, these are some pretty impressive stats:</p>
<ul>
<li>1209 Commits to the repository</li>
<li>228 Closed issues</li>
<li>290 Closed pull requests</li>
<li>42 Contributors</li>
</ul>
<p><img style="float:right; margin-left:10px;" alt="Retrospective after the Code-A-Thon in Redmond, Hosted by Microsoft" src="https://jcblogimages.blob.core.windows.net/img/2015/11/image2.png"></p>
<p>Most of this work has been accomplished by planting seeds at code-a-thons where developers get aquainted with the the project and the process. Most recently we organized a truly <em>global</em> effort when over 40 developers from 5 countries jumped in on one day to party on the code and complete features that were needed by the inaugural organization that is using the software.</p>
<p><img style="float:right; margin-left:10px;" src="https://jcblogimages.blob.core.windows.net/img/2016/03/red-cross.PNG"> Speaking of which, this is no small beans application: the American Red Cross is on board with the AllReady project providing leadership, testers and users through pilot programs in Chicago.</p>
<h1 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h1><p>If you have been looking into working in open source, I highly recommend considering AllReady as a place to get started, even to settle in on. </p>
<p>Here are some links to get you started:</p>
<ul>
<li><a href="https://github.com/HTBox/allReady/" target="_blank" rel="external">The AllReady repository on GitHub</a></li>
<li><a href="http://www.davepaquette.com/archive/2016/01/24/Submitting-Your-First-Pull-request.aspx" target="_blank" rel="external">Dave Paquette’s excellent intro post to contributing</a></li>
<li><a href="http://stevejgordon.co.uk/contributing-to-allready" target="_blank" rel="external">Steve Gordon’s thoughts and advice on joining AllReady</a></li>
<li><a href="https://github.com/HTBox/allReady/wiki/Solution-architecture" target="_blank" rel="external">Read about AllReady’s architecture</a></li>
</ul>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AllReady is an in-production piece of software build on ASP.NET Core that helps to alleviate the challenges of planning disaster-preparedness campaigns, co-ordinating volunteers and executing activities at scale. There are tasks for all levels of developers, designers and folks with expertise in humanitarian relief efforts. </p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/03/allready-running.PNG" alt="HTBox&#39;s AllReady Application"></p>]]>
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://jameschambers.com/tags/ASP-NET-Core/"/>
    
      <category term="AllReady" scheme="http://jameschambers.com/tags/AllReady/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Development" scheme="http://jameschambers.com/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[These People are Monsters! Here's Some Great Videos Covering ASP.NET Core and Core MVC]]></title>
    <link href="http://jameschambers.com/2016/03/these-people-are-monsters/"/>
    <id>http://jameschambers.com/2016/03/these-people-are-monsters/</id>
    <published>2016-03-11T02:48:38.000Z</published>
    <updated>2016-03-11T12:46:07.693Z</updated>
    <content type="html"><![CDATA[<p>I have had the privledge and pleasure of working with my good friends <a href="https://twitter.com/stimms" target="_blank" rel="external">Simon Timms</a> and <a href="https://twitter.com/Dave_Paquette" target="_blank" rel="external">Dave Paquette</a> on our new video series, The Monsters Weekly. Recently we have been added as <a href="https://channel9.msdn.com/Series/AspNetMonsters" target="_blank" rel="external">Channel 9</a> regulars on MSDN and we’ve been putting together two videos a week for the ASP.NET community. </p>
<p><img alt="" src="http://aspnetmonsters.com/images/logo_579.png"></p>
<a id="more"></a>
<h2 id="What_We_u2019ve_Been_Working_On"><a href="#What_We_u2019ve_Been_Working_On" class="headerlink" title="What We’ve Been Working On"></a>What We’ve Been Working On</h2><p>It’s really gone by quite quickly, I can’t believe how fast ten episodes came and went. We have been working on building up content that can be digested in 15 minutes or less. It’s easy to get through a video on a short break or over your lunch, so there’s no better time to get familiar with the next version of ASP.NET.</p>
<p>Here’s a short summary of the first videos we put together on our channel.</p>
<h3 id="ASP-NET_Core_-_Generally_Speaking"><a href="#ASP-NET_Core_-_Generally_Speaking" class="headerlink" title="ASP.NET Core - Generally Speaking"></a>ASP.NET Core - Generally Speaking</h3><ul>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-1-Startupcs" target="_blank" rel="external">A Walkthrough of Startup.cs</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-8-Tour-of-the-Default-ASPNET-MVC-Project" target="_blank" rel="external">A Walkthrough of the Default MVC Project</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-9-What-Makes-a-Controller" target="_blank" rel="external">Looking at Changes to Controllers in Core MVC</a></li>
</ul>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-5-Configuration-Settings" target="_blank" rel="external">A Look at the ASP.NET Core Configuration System</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-6-JSON-Data-and-The-Options-Pattern" target="_blank" rel="external">Using the Options Pattern to Load Configuration Settings</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-10-Loading-Settings-From-a-Database-in-ASPNET-Core" target="_blank" rel="external">Storeing your Configuration in a Database in ASP.NET Core</a></li>
</ul>
<h3 id="Front-_and_Back-end_Updates"><a href="#Front-_and_Back-end_Updates" class="headerlink" title="Front- and Back-end Updates"></a>Front- and Back-end Updates</h3><ul>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-7-Custom-Tag-Helpers" target="_blank" rel="external">Creating Custom Tag Helpers</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-2-Static-Files" target="_blank" rel="external">Serving Static Files in ASP.NET Core</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-3-Default-Gulp-File" target="_blank" rel="external">A Breakdown of the Default Gulp File in the Project Template</a></li>
<li><a href="https://channel9.msdn.com/Series/aspnetmonsters/Episode-4-Tag-Helpers-in-Razor" target="_blank" rel="external">Using Tag Helpers to Help Construct Views in Core MVC and the Razor View Engine</a></li>
</ul>
<p>As you can see, we’re trying to flesh out all areas to cover all aspects of software development. In the weeks ahead we’re going to be breaking into Docker, the <code>dotnet</code> CLI, changes coming in RC2 and more. </p>
<p><a href="https://channel9.msdn.com/Series/aspnetmonsters?sort=recent#tab_sortBy_recent" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/03/monsters-on-channel-9.png" alt="The ASP.NET Monsters on Channel 9"></a></p>
<h2 id="Some_Shameless_Self-Promotion"><a href="#Some_Shameless_Self-Promotion" class="headerlink" title="Some Shameless Self-Promotion"></a>Some Shameless Self-Promotion</h2><p>We’re also curating a <a href="http://aspnetmonsters.com" target="_blank" rel="external">blog</a> with posts from all three of us, news from the Monsters Weekly and other bits. We’re tweeting out on the Twitters, too, so please give us a follow/retweet if you don’t mind!</p>
<p><a href="https://twitter.com/AspNetMonsters" class="twitter-follow-button" data-show-count="false" target="_blank" rel="external">Follow @AspNetMonsters</a></p>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

<p>And if you’re clever, you can join in on our next contest, which may or may not have already started. Keep your eyes peeled and your thinking hat on!</p>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I have had the privledge and pleasure of working with my good friends <a href="https://twitter.com/stimms">Simon Timms</a> and <a href="https://twitter.com/Dave_Paquette">Dave Paquette</a> on our new video series, The Monsters Weekly. Recently we have been added as <a href="https://channel9.msdn.com/Series/AspNetMonsters">Channel 9</a> regulars on MSDN and we’ve been putting together two videos a week for the ASP.NET community. </p>
<p><img alt="" src="http://aspnetmonsters.com/images/logo_579.png"></p>]]>
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://jameschambers.com/tags/ASP-NET-Core/"/>
    
      <category term="News" scheme="http://jameschambers.com/categories/News/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tips for Speeding Up Visual Studio]]></title>
    <link href="http://jameschambers.com/2016/02/building-your-project-should-be-pretty-quick/"/>
    <id>http://jameschambers.com/2016/02/building-your-project-should-be-pretty-quick/</id>
    <published>2016-02-12T04:12:54.000Z</published>
    <updated>2016-03-11T02:58:18.496Z</updated>
    <content type="html"><![CDATA[<p>People, this is 2016. If you’re waiting on your project to build or feel like your IDE is sluggish, it’s time to inventory and make sure you have the optimal configurition for development rig. Let’s talk quickly about the things that make your machine go fast (or slow) and some simple tweaks that can get your builds moving along more quickly.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/02/safemode.png" alt="Launching VS in Safe Mode"></p>
<a id="more"></a>
<p>In a recent ASP.NET Community Standup, the team quickly ran through a list of things that you can do to make sure that your environment is in check for building as quickly as possible and running a stable version of Visual Studio.<!-- more --> These tips included:</p>
<ul>
<li>Start Visual Studio in Safe Mode</li>
<li>Run on an SSD</li>
<li>Exclude dev tools and folders from anti-virus software</li>
<li>Use a RAM disk for your code</li>
<li>Figure out <em>what is actually causing your grief</em> </li>
<li>Disabling features</li>
</ul>
<p><em><em>Update</em>: I’ve gotten a few great ideas in the comments below and would love to hear more! Please feel free to add your thoughts in the comments!</em></p>
<h2 id="Start_Visual_Studio_in_Safe_Mode"><a href="#Start_Visual_Studio_in_Safe_Mode" class="headerlink" title="Start Visual Studio in Safe Mode"></a>Start Visual Studio in Safe Mode</h2><p>This is an easy tip to try out and has no impact on your normal dev environment. It’s not as destructive as, say, resetting Visual Studio and nuking all your plugins. Just open a Visual Studio command prompt (I typically do so as admin) and launch the IDE like so:</p>
<p><code>devenv /SafeMode</code></p>
<p>Many times extensions crap out and slow you down. There are some great ones out there, so I would never suggest removing them all. I have a love-hate relationship with ReSharper and often disable it, especially when I’m travelling and can’t be plugged in to step up my CPU speed.</p>
<h2 id="Run_on_an_SSD"><a href="#Run_on_an_SSD" class="headerlink" title="Run on an SSD"></a>Run on an SSD</h2><p>This was a game changer for me: it was a tough pill to swallow, but going from hundreds of gigs of space down to ~40 on my first SSD was so worth it. Over the last couple of years I’ve upgraded along the way and currently have two that I sit on (on my two different rigs).</p>
<blockquote>
<p>If you can hear your hard drive, you are going to be an unhappy individual in your life. - Scott Hanselman</p>
</blockquote>
<p>I recommend <a href="http://www.amazon.ca/gp/product/B00OAJ412U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=15121&amp;creative=330641&amp;creativeASIN=B00OAJ412U&amp;linkCode=as2&amp;tag=chasthelist-20" target="_blank" rel="external">this one</a> or <a href="http://www.amazon.ca/gp/product/B00OBRFFAS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=15121&amp;creative=330641&amp;creativeASIN=B00OBRFFAS&amp;linkCode=as2&amp;tag=chasthelist-20" target="_blank" rel="external">this one</a> and can vouch for your <code>_happy++;</code> should you make the switch. The thing I love about the Samsungs is the little Magician software they bundle with the drives so that you can easily drop your HDD and move all your data over to the new, faster kit.</p>
<h2 id="Exclude_Your_Tooling_and_Code_From_Anti-Virus_Software"><a href="#Exclude_Your_Tooling_and_Code_From_Anti-Virus_Software" class="headerlink" title="Exclude Your Tooling and Code From Anti-Virus Software"></a>Exclude Your Tooling and Code From Anti-Virus Software</h2><p>I want to make it perfectly clear that while I agree with this tip and do this myself, it’s not one that you should take lightly as you’re removing a layer of protection from your computer. So don’t do it. Unless you want to run faster, in which case, exclude these guys from your real-time scan:</p>
<ul>
<li>devenv</li>
<li>msbuild</li>
<li>your code folder</li>
</ul>
<p>I’m running McAfee, which looks like this when you drill in from the dashboard:</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/02/anti-virus-exclude.PNG" alt="Excluding Tools from Virus Scans"></p>
<p>Pretty easy to setup, and you’ll get some of your day back. But I told you not to do it.</p>
<h2 id="Use_a_RAM_Disk_For_Your_Code"><a href="#Use_a_RAM_Disk_For_Your_Code" class="headerlink" title="Use a RAM Disk For Your Code"></a>Use a RAM Disk For Your Code</h2><p>There isn’t enough gain for me to recommend this one. I actually tried it a couple of years ago when I got my first SSD and the speed wasn’t greatly improved. On top of that, it required slicing out RAM, running scripts to mirror or copy over the code and ran the risk of data loss if the computer freezes. If you can drop $100 or less on an SSD, it’s just not worth it to run a RAM disk. Some folks argue that it’s 10x the speed (or more) than an SSD, but I wasn’t sold on that sales pitch.</p>
<p><em>That said</em>, if you’re still on an HDD, I can confirm that running on a RAM disk will be a Godsend. Most recently I have used <a href="http://www.ltr-data.se/opencode.html/" target="_blank" rel="external">this one</a> but I haven’t tried it on Win 10. There’s also a commercial one that <a href="http://www.superspeed.com/desktop/ramdisk.php" target="_blank" rel="external">a friend of mine swears by</a>. </p>
<h2 id="Figure_Out_What_is_Actually_Causing_Your_Grief"><a href="#Figure_Out_What_is_Actually_Causing_Your_Grief" class="headerlink" title="Figure Out What is Actually Causing Your Grief"></a>Figure Out What is Actually Causing Your Grief</h2><p>There’s a great tool that most devs I know run on their machine, the much-improved version of process monitor from <a href="https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx" target="_blank" rel="external">sysinternals</a>:</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/02/sysinternals-procmon.PNG" alt="Process Monitor"></p>
<p>SIPM will reveal everything that gets logged out by any processes that are running, from disk reads/writes to thread allocation to network activity and more. If you ever figured there wasn’t a lot to do when you “just wanted to build”, you’ll be quite surprised when you build your project and see tens of thousands of events drop in milliseconds. Computers are awesome.</p>
<p>Simply start up process monitor, then start Visual Studio and watch for events. You can start honing in and finding what is causing your grief. I find the best way to get at things is by excluding the bits that you know are not the problem, like explorer.exe, and then honing in by excluding things like reading from the registry.  </p>
<h2 id="Disabling_Features"><a href="#Disabling_Features" class="headerlink" title="Disabling Features"></a>Disabling Features</h2><p>Things like IntelliTrace offer great benefits, but if you’re in power-saver mode you’re going to find yourself crying for processor cycles. I notice when travelling, when I often find myself not plugged in, that builds can drag on and debugging can be brutal if you have certain features on. Check to see if you have anything running that you don’t need. </p>
<h2 id="Straight_from_the_Horse_u2019s_u2026"><a href="#Straight_from_the_Horse_u2019s_u2026" class="headerlink" title="Straight from the Horse’s…"></a>Straight from the Horse’s…</h2><p>You can watch the original video below (jump to the 36:00 mark), or hit it out on the <a href="https://youtu.be/niCDYdrCOu0?t=32m6s" target="_blank" rel="external">YouTubes</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/niCDYdrCOu0" frameborder="0" allowfullscreen></iframe>

<p>A huge thanks to the leaders there on the ASP.NET team who do the weekly standup and share their insight in this area. </p>
<h2 id="How_About_You_3F"><a href="#How_About_You_3F" class="headerlink" title="How About You?"></a>How About You?</h2><p>Do you have any tips for others using Visual Studio? Any tricks you think have helped you reach performance nirvana? Please share your thoughts below!</p>
<p>Happy Coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>People, this is 2016. If you’re waiting on your project to build or feel like your IDE is sluggish, it’s time to inventory and make sure you have the optimal configurition for development rig. Let’s talk quickly about the things that make your machine go fast (or slow) and some simple tweaks that can get your builds moving along more quickly.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/02/safemode.png" alt="Launching VS in Safe Mode"></p>]]>
    
    </summary>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Development" scheme="http://jameschambers.com/categories/Development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Leaving Your Work at Work (When You Work From Home)]]></title>
    <link href="http://jameschambers.com/2016/01/leaving-your-work-at-work-when-you-work-from-home/"/>
    <id>http://jameschambers.com/2016/01/leaving-your-work-at-work-when-you-work-from-home/</id>
    <published>2016-01-30T13:46:56.000Z</published>
    <updated>2016-02-01T02:19:48.052Z</updated>
    <content type="html"><![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/shutting-down-banner.png" alt="Leaving Your Work at Work (When You Work From Home)"></p>
<p>Finding success as a remote worker is pretty darn hard. Unless you’re a complete natural, you will need to have the perfect combination of environment, corporate trust, family time and personal time. Failing being perfect, you can just take the route I took and try your best to follow a few practices that can help you disconnect at the end of the day. </p>
<a id="more"></a>
<p>To that end, corporate trust is just as tricky a puzzle as the rest of the challenges for work-at-homes; however, provided you are working at or moving to a company that understands remote work and empowers you to succeed, there are things you need to be doing to build and maintain that trust. </p>
<h2 id="Establish_A_Routine"><a href="#Establish_A_Routine" class="headerlink" title="Establish A Routine"></a>Establish A Routine</h2><p>When you work in an office, chances are you have some form of a daily ritual that you partake in. You have things you do when get up as you prepare for your workday explicitly, and maybe some that happen subconsciously. You make some eggs for your husband or some bacon for your wife while they get the kids ready for school. Maybe you spend time in some personal study. Eventually you start to make your way to the office on foot, by bike, in your vehicle or perhaps on some form of mass public transit. Some poor saps have even parted ways with their cash to buy Segways and, sadly, they use those to get where they’re going. You swing by your favorite coffee joint, or meet up with co-workers in the lobby and chat on the elevator ride and at some point you find yourself at your desk.</p>
<p>The point is simply this: getting from point A to point B <em>is part of the routine</em>. You start thinking about work, your schedule, what happened last week. If your transportation is “hands off” then you can catch up on emails or start to plan your day out. The <em>transition</em> is more important than the destination in this case, but this is unfortunately the very thing that most remote workers will omit.</p>
<p>For me, I love <a href="http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/">walking to and from work</a>. Yes, I work from home, but I’ve made the walk part of my ritual. In the morning it lets me tune into my work day and in the late afternoon when I’m leaving work I can reset and get ready to enjoy my family. </p>
<blockquote>
<p>Moving directly from a work context into a home context not only blurs the lines, but it discounts the fact that you need a different mindspace to manage your work than you do to manage your home.</p>
</blockquote>
<p>You need a line to say, “this is where work stops and my personal life begins.”</p>
<h2 id="Define_Boundaries"><a href="#Define_Boundaries" class="headerlink" title="Define Boundaries"></a>Define Boundaries</h2><p>You have an agreement with your employer to perform certain units of work, but it’s your responsibility to <a href="http://jameschambers.com/2016/01/work-is-not-life/">set expectations accordingly</a>. That means that you should engage in practices that allow you to define a clean break from the work day.</p>
<p>One of the ways that I do this is by virtue of leaving my contact points at work. I have a Skype number that is associated with my work duties that I don’t answer during evening and weekends. When I’m getting ready to leave work I change my email settings on my phone to only check for new mail on demand. </p>
<p>Another way to set boundaries is to actively engage in other things in the non-work times. That means dedicating time to your family, and if you must, signing your family up for things that happen during those evening and weekend hours, or getting involved with a group of friends that are active and motivated to do non-work-like things. This could be snowboarding, gaming, camping, playing music or hanging out for wings. If you make commitments that take you away from work, well, you can’t work.  </p>
<h2 id="Remember_the_Inverse"><a href="#Remember_the_Inverse" class="headerlink" title="Remember the Inverse"></a>Remember the Inverse</h2><p>Let’s also note that the reverse must also hold true; if you are going to be setting limits on when you can and can’t access work, you must also set limits on when you can and can’t access “home”.  I have done this in a number of ways:</p>
<ul>
<li>I say “good-bye” to my wife and kids when I “leave” in the morning</li>
<li>I don’t have a home phone in my office</li>
<li>I don’t keep my personal cell phone handy</li>
<li>I don’t check personal email during work time</li>
<li>I treat my time in my office as though I was in a different place than my home, as though others were working in the next office or room</li>
<li>Things like arranging child care or planning to shuttle kids between activies happens during the evening</li>
<li>My wife and kids don’t re-engage with me until I come home and say “hello” again</li>
</ul>
<p>There are, of course, some exceptions to these rules and there must be. My oldest son lives with Type 1 Diabetes, so when my wife is unavailable to assist, I bring the house phone into my workspace for emergencies. When I am expecting a package or someone to swing by I will indeed answer the door. But these are things that you can also make your co-workers aware of so that the disruption is not something that derails your work and they know that it may be coming.  Emergencies, on the other hand, are emergencies and I don’t think those should be viewed any differently by your team and management than they would if you were in the office.</p>
<h2 id="Shutting_Down"><a href="#Shutting_Down" class="headerlink" title="Shutting Down"></a>Shutting Down</h2><p>Here are a few tips to help you close things off at the end of the day. </p>
<ul>
<li>Flag important messages or tasks that need to be accomplished when you return the next working day.</li>
<li>Be sure to log your time daily and submit your timesheet - this is a trust device for your employer.</li>
<li>Change settings on your phone to check work email on demand.</li>
<li>If you will be away for an extended period of time or even just a long weekend, set away message.</li>
<li>Close everything. All your apps. Close your email client and your browser tabs and the TPS Report you’re working on (including cover pages) and everything else that is on your system.</li>
</ul>
<p>With practices like these in place, you’ll find that you actually have some peace of mind through the evening, knowing that you’ve tied things off at the end of the day. You don’t have to worry about lost work, or missed follow-ups. </p>
<p>By the way, the same is also true when starting your day: you should have an easy way to get going in the morning so that as soon as you sit down at your computer you are ready to be productive and get into your daily flow. As a software developer, I actually have a script that I run that spins up my tools and opens the folders that I need so that everything I’ll be working on is in front of me. Even if my computer has rebooted or applied updates, I am ready to rock out on my project in just a few seconds.  If you’re interested, here’s an example of a script I use to get my day started.</p>
<script src="https://gist.github.com/MisterJames/8a1548564202a1b96d1a.js"></script>

<p>Finally, wind down! <a href="http://jameschambers.com/2015/03/working-from-home-and-walking-to-work-surviving-remote-work/">I walk home</a> on most days to disconnect from work. I have friend who hits the gym and others for whom the timing works to break off at the end of the day and go pick up the kids.</p>
<h2 id="Where_Does_This_Leave_You_3F"><a href="#Where_Does_This_Leave_You_3F" class="headerlink" title="Where Does This Leave You?"></a>Where Does This Leave You?</h2><p>If you are currently working at home and don’t have these practices in place, it will take some time to work up to them. While they mostly seem simply on the surface, some habits are hard to break, and changing expectations is even more difficult if you’ve previously let work creep out of your home office.</p>
<p>As I always say when talking with folks about this, you really need to experiment and find the things that work for you for where you’re at and keep evaluating if there are tweaks or corrections you need to make along the way.</p>
<p>Any effort to help you move away from the feeling of constantly being connected to work will help you better enjoy your evenings and weekends. I hope you find a few gems in here that encourage you to work towards that goal.</p>
<p>Happy relaxing! (Now, go spend some time with you family or friends!)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/shutting-down-banner.png" alt="Leaving Your Work at Work (When You Work From Home)"></p>
<p>Finding success as a remote worker is pretty darn hard. Unless you’re a complete natural, you will need to have the perfect combination of environment, corporate trust, family time and personal time. Failing being perfect, you can just take the route I took and try your best to follow a few practices that can help you disconnect at the end of the day. </p>]]>
    
    </summary>
    
      <category term="Life Hacks" scheme="http://jameschambers.com/tags/Life-Hacks/"/>
    
      <category term="Remote Work" scheme="http://jameschambers.com/tags/Remote-Work/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Strongly-Typed Configuration in ASP.NET Core MVC]]></title>
    <link href="http://jameschambers.com/2016/01/Strongly-Typed-Configuration-in-ASP-NET-Core-MVC/"/>
    <id>http://jameschambers.com/2016/01/Strongly-Typed-Configuration-in-ASP-NET-Core-MVC/</id>
    <published>2016-01-23T16:29:12.000Z</published>
    <updated>2016-01-23T17:49:01.992Z</updated>
    <content type="html"><![CDATA[<p>Over the last <strong><a href="http://jameschambers.com/2016/01/Configuration-in-ASP-NET-Core-MVC/">two</a></strong> <strong><a href="http://jameschambers.com/2016/01/json-config-in-aspnetcoremvc/">posts</a></strong> I worked through the basics of configuration in ASP.NET and how to leverage structured data in your JSON config files. Now it’s time to take a deeper look at how to access relevant parts of your configuration throughout the rest of your project.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/typed-settings.png" alt="Strongly-Typed Settings Classes in ASP.NET Core"></p>
<a id="more"></a>
<p>I contribute to an open source project called <a href="https://github.com/HTBox/allReady" target="_blank" rel="external">AllReady</a> from the <a href="http://htbox.org" target="_blank" rel="external">Humanitarian Toolbox</a>. One of the things that we do on the project is use Azure Storage Queues to send and process messages in a different execution context to keep our main application moving along nicely. In order to do this, I added some properties to the configuration file under a storage node:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;Data&#34;: &#123;&#10;  &#34;DefaultConnection&#34;: &#123;&#10;    &#34;ConnectionString&#34;: &#34;Server=(localdb)\\MSSQLLocalDB;Database=AllReady;Integrated Security=true;MultipleActiveResultsets=true;&#34;&#10;  &#125;,&#10;  &#34;Storage&#34;: &#123;&#10;    &#34;AzureStorage&#34;: &#34;[storagekey]&#34;,    &#10;    &#34;EnableAzureQueueService&#34;: &#34;false&#34;&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>Obviously, “<code>[storagekey]</code>“ is not a valid key to access a storage account in Azure, but you’ll notice that I also have a flag in there to enable/disable the queue service. By putting this in place, we can toggle the service used at dev time and, rather than writing to the queue, we can instead write to the local console. Of course, we have the propery key set in our Azure Web App so that it’s loaded and overridden at run time with the correct value. I discussed nomenclature of the keys you’d use in my post on <a href="http://jameschambers.com/2016/01/json-config-in-aspnetcoremvc/">JSON Configuration</a>.</p>
<h2 id="Exposing_Configuration_Accross_the_Application"><a href="#Exposing_Configuration_Accross_the_Application" class="headerlink" title="Exposing Configuration Accross the Application"></a>Exposing Configuration Accross the Application</h2><p>Now, to actually put the storage settings from our config in play, we’re going to create a class to contain the properties that we will need to inspect at runtime.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class AzureStorageSettings&#10;&#123;&#10;    public string AzureStorage &#123; get; set; &#125;&#10;    public bool EnableAzureQueueService &#123; get; set; &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>This class is a one-to-one mapping of the values we put in our <code>Storage</code> section. All that’s left is to get the values from our configuration in there.</p>
<h2 id="The_Options_Pattern_for_Configuration"><a href="#The_Options_Pattern_for_Configuration" class="headerlink" title="The Options Pattern for Configuration"></a>The Options Pattern for Configuration</h2><p>Originally I was loading up these properties one-by-each, line after line of reading from the config and assigning the values to the instance of the <code>AzureStorageSettings</code> class. But in the fall I had the opportunity to work with <a href="https://github.com/rynowak" target="_blank" rel="external">Ryan Nowak</a> of the ASP.NET team and he showed me a much better approach with what the ASP.NET team refers to as the options pattern. It’s basically closing the loop on the work we have above and giving us the ability to get at our configuration with strongy-typed objects.</p>
<p>As a reminder, our <code>Configuration</code> property back in <code>startup.cs</code> is an instance of an <code>IConfiguration</code>, built from the <code>ConfigurationBuilder</code> in our constructor. It contains all the data that we’ve added in key-value pairs, and we can now use that object to expose the information we need through our IoC container when we’re configuring our services.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)&#10;&#123;&#10;    services.Configure&#60;AzureStorageSettings&#62;(Configuration.GetSection(&#34;Data:Storage&#34;));&#10;    &#10;    // other service configuration code here...&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>What we have to do is call the <code>GetSection</code> method along with the corresponding path to where the object instance’s properties will be loaded from. Our <code>Storage</code> information was in the <code>Data</code> property at the root of the document, so we pack it in as <code>Data:Storage</code> as the parameter to <code>GetSection</code>.</p>
<p>Now I’ve got configuration in my IoC container and I’ve got a class that represents the slice of configuration that I’m interested in. Now I want to mux those up and use it in my service (or controller or anything that is spun up with IoC). To do that I simply inject it into my constructor like so:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public QueueStorageService(IOptions&#60;AzureStorageSettings&#62; options)&#10;&#123;&#10;    AzureStorageSettings settings = options.Value;&#10;    &#10;    // work with settings&#10;    var cloudStorageKey = options.Value.AzureStorage;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>By simply accepting a parameter of type <code>IOptions&lt;AzureStorageSettings&gt;</code> in the constructor of my controller, the appropriate configuration elements are parsed out and provided to me in the <code>Value</code> property as an instance of my <code>AzureStorageSettings</code> class. </p>
<p>Note: You’ll have to add a using statement to your controller or service for the <code>IOptions</code> interface: </p>
<pre><code>using Microsoft.Extensions.OptionsModel;
</code></pre><h2 id="Wrapping_Up"><a href="#Wrapping_Up" class="headerlink" title="Wrapping Up"></a>Wrapping Up</h2><p>So to review, there are a couple of things we need to do:</p>
<ul>
<li>Create the configuration section</li>
<li>Create an object that corresponds to our configuration properties</li>
<li>Expose the settings class in our IoC container</li>
<li>Leverage <code>IOptions&lt;&gt;</code> to inject the settings into our constructor</li>
</ul>
<p>As you can see, this is a powerful and efficient way to create strongly-typed configuration objects in your ASP.NET Core MVC projects. It takes a minute to wrap your head around the pieces that are in play, but we can do away with the old method of custom configuration sections and simply represent our configuration data as JSON.</p>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Over the last <strong><a href="http://jameschambers.com/2016/01/Configuration-in-ASP-NET-Core-MVC/">two</a></strong> <strong><a href="http://jameschambers.com/2016/01/json-config-in-aspnetcoremvc/">posts</a></strong> I worked through the basics of configuration in ASP.NET and how to leverage structured data in your JSON config files. Now it’s time to take a deeper look at how to access relevant parts of your configuration throughout the rest of your project.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/typed-settings.png" alt="Strongly-Typed Settings Classes in ASP.NET Core"></p>]]>
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://jameschambers.com/tags/ASP-NET-Core/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSON Configuration in ASP.NET Core MVC]]></title>
    <link href="http://jameschambers.com/2016/01/json-config-in-aspnetcoremvc/"/>
    <id>http://jameschambers.com/2016/01/json-config-in-aspnetcoremvc/</id>
    <published>2016-01-22T03:36:09.000Z</published>
    <updated>2016-01-22T04:01:37.026Z</updated>
    <content type="html"><![CDATA[<p>Structured data in earlier versions of ASP.NET meant creating and registering custom types and configuration sections for our applications. In ASP.NET Core and in Core MVC, structured configuration is a breeze with support for JSON documents as the storage mechanism and the ability to flatten hierarchies into highly portable keys.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/json-structured-data.png" alt="Structured JSON Configuration"></p>
<a id="more"></a>
<p>You can see from the document snippet above, taken from the default project template, that we can easily achieve a well-structured, human-readible set of data.  Where we used to do something the the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;appSettings&#62;&#10;  &#60;add key=&#34;Logging-IncludeScopes&#34; value=&#34;false&#34; /&#62;&#10;  &#60;add key=&#34;Logging-Level-Default&#34; value=&#34;verbose&#34; /&#62;&#10;  &#60;add key=&#34;Logging-Level-System&#34; value=&#34;Information&#34; /&#62;&#10;  &#60;add key=&#34;Logging-Level-Microsoft&#34; value=&#34;Information&#34; /&#62;&#10;&#60;/appSettings&#62;</span><br></pre></td></tr></table></figure>
<p>Our other option, of course, is going the custom object route, but that has always been a pain in the rear. Today we can do this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;Logging&#34;: &#123;&#10;  &#34;IncludeScopes&#34;: false,&#10;  &#34;LogLevel&#34;: &#123;&#10;    &#34;Default&#34;: &#34;Verbose&#34;,&#10;    &#34;System&#34;: &#34;Information&#34;,&#10;    &#34;Microsoft&#34;: &#34;Information&#34;&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>Now the data that we have related to logging can be grouped into a logical fragment of the configuration file and can grow as required. </p>
<h2 id="Exploring_a_Common_Example"><a href="#Exploring_a_Common_Example" class="headerlink" title="Exploring a Common Example"></a>Exploring a Common Example</h2><p>This organization is great and comes along with the benefit of being collapsable into a key-value pair.  We see evidence of this in the connection string, which is also located in the <code>appsettings.json</code> file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;Data&#34;: &#123;&#10;  &#34;DefaultConnection&#34;: &#123;&#10;    &#34;ConnectionString&#34;: &#34;Server=(localdb)\\mssqllocaldb;Database=aspnet5-ConfigurationSample-ad90971f-6620-4bc1-ad28-650c59478cc1;Trusted_Connection=True;MultipleActiveResultSets=true&#34;&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>And when you want to pull it out of the stored configuration, you do so like this example from <code>startup.cs</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddEntityFramework()&#10;    .AddSqlServer()&#10;    .AddDbContext&#60;ApplicationDbContext&#62;(options =&#62;&#10;        options.UseSqlServer(Configuration[&#34;Data:DefaultConnection:ConnectionString&#34;]));</span><br></pre></td></tr></table></figure>
<p>Notice how the value of the <code>ConnectionString</code> property of the <code>DefaultConnection</code> object within the <code>Data</code> object at the root was stored as the key <code>Data:DefaultConnection:ConnectionString</code>. This is perfect for allowing overrides, such as using environment variables. This is further made handy by the fact that your settings in Azure are automatically loaded as environment variables into your application execution process at startup.</p>
<p>In your Azure Web App configuration, you would simply need to add a key named <code>Data:DefaultConnection:ConnectionString</code> and set the value accordingly. This means that developers can use LocalDB locally, and the app automatically lights up in the cloud with the real database.</p>
<h2 id="Next_Up"><a href="#Next_Up" class="headerlink" title="Next Up"></a>Next Up</h2><p>These key-value pairs are great, but in your application it would be a bother to have to load out each property by hand. In my next post I’m going to show you how to take a configuration section and turn it into a set of typed configuration options that can be used throughout your project. </p>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Structured data in earlier versions of ASP.NET meant creating and registering custom types and configuration sections for our applications. In ASP.NET Core and in Core MVC, structured configuration is a breeze with support for JSON documents as the storage mechanism and the ability to flatten hierarchies into highly portable keys.</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/json-structured-data.png" alt="Structured JSON Configuration"></p>]]>
    
    </summary>
    
      <category term="ASP.NET 5" scheme="http://jameschambers.com/tags/ASP-NET-5/"/>
    
      <category term="ASP.NET Core" scheme="http://jameschambers.com/tags/ASP-NET-Core/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Configuration in ASP.NET Core MVC]]></title>
    <link href="http://jameschambers.com/2016/01/Configuration-in-ASP-NET-Core-MVC/"/>
    <id>http://jameschambers.com/2016/01/Configuration-in-ASP-NET-Core-MVC/</id>
    <published>2016-01-21T02:27:23.000Z</published>
    <updated>2016-01-22T03:58:44.761Z</updated>
    <content type="html"><![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/startup-config.png" alt="Config in Startup.cs"></p>
<p>ASP.NET Core MVC introduces a new configuration system that adds flexibility and simultaneously enables cross-platform support (in a way that makes sense on other platforms). In this post we’re going to cover the basics of configuration and what you can expect as you look at the project template from File -&gt; New Project in Visual Studio 2015.</p>
<a id="more"></a>
<p><span class="side-note">ASP.NET Core was previously called ASP.NET 5, and before that ASP.NET vNext. ASP.NET Core MVC is what was referred to as MVC 6. The tooling and the branding will change in the weeks and months ahead, but the basics of configuration I detail here should remain relatively in-tact.</span></p>
<h2 id="Configuration_Happens_Early"><a href="#Configuration_Happens_Early" class="headerlink" title="Configuration Happens Early"></a>Configuration Happens Early</h2><p>In earlier versions of MVC it is true that the configuration was loaded very early in the process. If you had values in your App.Config they got gobbled up at startup. The problem was, you didn’t have a chance to really interact with the configuration system - it just was what it was. This usually meant that we would create our own systems for loading the values, we’d get creative in how we balanced config-time and run-time values and, in short, we’d have to do the heavy-lifting ourselves.</p>
<p>ASP.NET Core lets us be much more opinionated about what goes on while registering the configuration values. Sure, it does and should still load configuration pre-startup, but now we can play a role in the process. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public Startup(IHostingEnvironment env)&#10;&#123;&#10;    // Set up configuration sources.&#10;    var builder = new ConfigurationBuilder()&#10;        .AddJsonFile(&#34;appsettings.json&#34;)&#10;        .AddJsonFile($&#34;appsettings.&#123;env.EnvironmentName&#125;.json&#34;, optional: true);&#10;&#10;    if (env.IsDevelopment())&#10;    &#123;&#10;        builder.AddUserSecrets();&#10;    &#125;&#10;&#10;    builder.AddEnvironmentVariables();&#10;    Configuration = builder.Build();&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see above, the first lines of code on the first bit of code our application contains what is needed to load our configuration.  </p>
<h2 id="Configuration_Happens_Often_2C_if_You_Like"><a href="#Configuration_Happens_Often_2C_if_You_Like" class="headerlink" title="Configuration Happens Often, if You Like"></a>Configuration Happens Often, if You Like</h2><p>More importantly, we get a say in how and where the configuration is loaded from. A great example of this is that we can load a JSON file for the default config and then later use environment variables to overload those defaults. </p>
<p>That code above is the <code>Startup</code> method of the <code>Startup</code> class, and we’re very certain about when the config is loaded and where from. We even get to test if we’re in the development envionment.</p>
<p>This comes in handy when you’re deploying to Azure or would like to test with your own values instead of making changes to the JSON config file that would otherwise be checked in with the project.</p>
<p>Speaking of which, you’re going to likely need to store some values in there that you <em>will never want to share</em>, and that you’ll never want to check into your repo. This would be things like API tokens for integration into third-party services and the like (think SendGrid, Twilio, PayPal and the like).</p>
<h2 id="Configuration_Opens_Doors_for_Secrets"><a href="#Configuration_Opens_Doors_for_Secrets" class="headerlink" title="Configuration Opens Doors for Secrets"></a>Configuration Opens Doors for Secrets</h2><p>And that brings us to user secrets. It’s still not clear how these guys are going to shake down - there’s still active discussion about how it should be named and stored - but the idea is straightforward and lets you work locally with sensitive data without having to modify your config. You can think of them as “environment variables for your project”. </p>
<p>There is pretty basic tooling from the command line:</p>
<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/user-secret.png" alt="User Secrets"></p>
<p>The secrets are stored in your user data here:</p>
<pre><code>%APPDATA%\microsoft\UserSecrets\
</code></pre><p>If you’ve used secrets, there will be a sub-folder here for each project you’ve created. Depending on where they land, the secrets will likely be a combination of the project name and a GUID, but you can set this yourself in your project.json.</p>
<p>I’ll do a follow-up post on user secrets and demonstrate in greater detail how to leverage it in your projects.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>We’re still in an RC period (should it be called beta?) and there are naming pieces yet to come, but there is nothing stopping you from learning about the configuration system in ASP.NET Core today. Grab a copy of Visual Studio 2015 - <a href="/">hey, it’s free!</a> - and start experimenting with the bits. Be sure to check back in the weeks ahead for more information about configuration in ASP.NET Core and Core MVC.</p>
<p>Happy coding!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net:443/img/2016/01/startup-config.png" alt="Config in Startup.cs"></p>
<p>ASP.NET Core MVC introduces a new configuration system that adds flexibility and simultaneously enables cross-platform support (in a way that makes sense on other platforms). In this post we’re going to cover the basics of configuration and what you can expect as you look at the project template from File -&gt; New Project in Visual Studio 2015.</p>]]>
    
    </summary>
    
      <category term="ASP.NET 5" scheme="http://jameschambers.com/tags/ASP-NET-5/"/>
    
      <category term="ASP.NET Core" scheme="http://jameschambers.com/tags/ASP-NET-Core/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Everything You Need To Know About Microsoft Band 2 Battery Life]]></title>
    <link href="http://jameschambers.com/2016/01/2106-01-17-Everything-You-Need-To-Know-About-Band-2-Battery-Life/"/>
    <id>http://jameschambers.com/2016/01/2106-01-17-Everything-You-Need-To-Know-About-Band-2-Battery-Life/</id>
    <published>2016-01-18T02:44:01.000Z</published>
    <updated>2016-01-20T13:01:39.618Z</updated>
    <content type="html"><![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2.png" alt="Band 2"></p>
<p>The day the announcement was made for Band 2, I was watching the keynote and keeping my finger on F5, repeatedly refreshing my browser and eagerly waiting for the Band 2 “Coming Soon” page turn over to an “Order Now” page. The week before launch, I added my credit card as a saved card on the Microsoft store. As soon as the page flipped over, I pulled the trigger and reserved my new edition.</p>
<p>I’ve worn it every day since November 2, 2015 and here’s what I’ve learned about the Microsoft Band 2 battery life, including tips on how to keep yours running <strong>all week long</strong>.</p>
<a id="more"></a>
<p><em> <strong>Updated Jan 19</strong>: Added info about the battery and links to resources based on feedback on Reddit.</em></p>
<h2 id="Charging_the_Microsoft_Band_2"><a href="#Charging_the_Microsoft_Band_2" class="headerlink" title="Charging the Microsoft Band 2"></a>Charging the Microsoft Band 2</h2><p>The Band is easily charged by unhinging the clasp and sliding the device off your wrist, then attaching the magnetized charger, which snaps automatically in place. A full charge for a fully depleted battery should run you less than two hours.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2-charger.png" alt="Band 2 Charging"></p>
<h2 id="Battery_Life"><a href="#Battery_Life" class="headerlink" title="Battery Life"></a>Battery Life</h2><p>Under normal usage, your Band will deplete about 30% per day. This includes getting notifications, syncing with your phone, controlling music, setting timers and alarms, using the daily heart rate tracking and buying coffee at Starbucks, should you be so inclined.</p>
<p>Adding workouts to your day will drive the battery down a little more quickly, and I seem to burn about 10% of my battery when I go for a 30 min run with GPS turned on. </p>
<h2 id="Watch_Mode"><a href="#Watch_Mode" class="headerlink" title="Watch Mode"></a>Watch Mode</h2><p>One feature that I really do enjoy about the Band 2 is the glance mode that allows you to turn your arm up as a cue for the Band to display the time. While this is super handy - the gesture replaces the need the press a button to see the time - it is also taxing on your battery life. With this feature one, I was losing more than 55% of my battery’s charge each day, meaning it was impossible to keep it running for the week. I, therefore, disabled the feature and have reverted to clicking the primary button to call up the time.</p>
<h2 id="Charge_Time"><a href="#Charge_Time" class="headerlink" title="Charge Time"></a>Charge Time</h2><p>The “bottom half” of the battery seems to charge a little quicker than the “top half”. What I mean is that going from 0%  to 50% seems to take about 40 minutes or so whereas from the 50% mark and higher, the Band 2 charges at a rate of about 1% per minute. </p>
<h2 id="My_Routine"><a href="#My_Routine" class="headerlink" title="My Routine"></a>My Routine</h2><p>The battery on my Band 2 lasts me through the week.  While it depletes every day about 30%, I also charge it every day during my daily routine and after workouts while I shower, and I never let it run all the way to 0% if I can help it.  Here’s a log from my last week of use starting with a full charge on Saturday:</p>
<ul>
<li>Sunday AM: 72%, charged to 91%</li>
<li>Monday AM: 66%, charged to 83%</li>
<li>Tuesday AM: 51%, charged to 70%</li>
<li>Tuesday workout: 60%, charged to 79%</li>
<li>Wednesday AM: 63%, charged to 80%</li>
<li>Thursday AM: 49%, charged to 64%</li>
<li>Thursday workout: 48%, charged to 63%</li>
<li>Friday AM: 50%, charged to 65%</li>
<li>Saturday AM: 31%, charged to 100%</li>
</ul>
<p>Basically, I’m charging it when I get ready in the AM, which doesn’t quite catch it up for what it lost over the previous day. However, when I workout, I typically shower afterwards and this gives me an extra 15-20 minutes to charge it again. So, interestingly, I actualy use up the Band 2 battery <em>less</em> when I’m working out more.</p>
<h2 id="Cylcing_the_Charge"><a href="#Cylcing_the_Charge" class="headerlink" title="Cylcing the Charge"></a>Cylcing the Charge</h2><p>Most Saturdays I actually wear my Band until the battery warning goes off, then I plug it in until fully charged. I called into the Microsoft support line and asked if this was a good practice for using and charging the Band 2 - essentially letting it run down to about 10% through the week and then giving it a complete charge on the weekend. The support technician on the call agreed that this was a good strategy and commented that she has a similar routine. In the two-and-a-half months of use, I have not seen depreciating performance on the battery life.</p>
<p>There is a great resource on lithium batteries that supports most of this approach <a href="http://www.batteryuniversity.com/learn/article/how_to_prolong_lithium_based_batteries" target="_blank" rel="external">located here</a>. Frequent charging and the occasional charge to capacity will help extend the life of your battery and keep the meter accurate:</p>
<blockquote>
<p>If at all possible, avoid full discharges and charge the battery more often between uses. Partial discharge on Li-ion is fine. There is no memory and the battery does not need periodic full discharge cycles to prolong life. The exception may be a periodic calibration of the fuel gauge on a smart battery or intelligent device. </p>
</blockquote>
<p>Of course, an important note there is that the “depth of discharge” is a factor in the logevity of your battery. Allowing the Band to get down too low may impact it over the longer term, so charging often to keep your charge up seems to be a benefit.</p>
<h2 id="Charging_Tips"><a href="#Charging_Tips" class="headerlink" title="Charging Tips"></a>Charging Tips</h2><p>Here’s a few things you can do to keep your Band 2 running all week:</p>
<ul>
<li>Keep your charger plugged in where you get ready in the AM</li>
<li>Clean the contacts before you attach the charger, and thouroughly after a workout</li>
<li>Let it run down without completely depleting and give it a full charge occasionally to help keep the meter accurate</li>
<li>Buy a second charger if you need one, for example if you walk or ride to work</li>
</ul>
<p>Happy fitnessing!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/band-2.png" alt="Band 2"></p>
<p>The day the announcement was made for Band 2, I was watching the keynote and keeping my finger on F5, repeatedly refreshing my browser and eagerly waiting for the Band 2 “Coming Soon” page turn over to an “Order Now” page. The week before launch, I added my credit card as a saved card on the Microsoft store. As soon as the page flipped over, I pulled the trigger and reserved my new edition.</p>
<p>I’ve worn it every day since November 2, 2015 and here’s what I’ve learned about the Microsoft Band 2 battery life, including tips on how to keep yours running <strong>all week long</strong>.</p>]]>
    
    </summary>
    
      <category term="Microsoft Band" scheme="http://jameschambers.com/tags/Microsoft-Band/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Your Work and Your Life are Not Intricately Intertwined]]></title>
    <link href="http://jameschambers.com/2016/01/work-is-not-life/"/>
    <id>http://jameschambers.com/2016/01/work-is-not-life/</id>
    <published>2016-01-11T02:24:09.000Z</published>
    <updated>2016-01-20T03:26:07.901Z</updated>
    <content type="html"><![CDATA[<p>You are <strong>always</strong> setting expectations. When you answer an email at 10pm, you are setting an expectation. When let a call go to voicemail at 6pm, you are setting an expectation.</p>
<p>These are difficult things to accept, especially if you’re in competition for advancement or your employer is challenging your boundaries on a regular basis, but just remember that resetting expectations is much more difficult that setting them in the first place. Remembering that every action you take (or don’t) defines how people will expect you to act in the future.<br><a id="more"></a></p>
<p>I am currently an employee and likely will be for the foreseeable future. My career aspirations do not include management despite the fact that I love to lead teams (there is a significant difference between the two, but I’ll save that for a different post). I firmly believe that you can lead a work life and a personal life that are largely disconnected and be quite successful doing so.</p>
<p>As someone who has found incredible happiness in the <em>balance</em> between a happy home life and spending an appropriate amount of time on my career, I recently read a post that did not sit well with me at all. In “distilling” everything down in to what was needed in order to be productive, the author lists a set of “rules” that include this: </p>
<blockquote>
<p>Embrace the fact that work and life are intricately intertwined </p>
</blockquote>
<p>I’m going to tell you right now: there are a lot of things wrong with this rule. The rest of that post is laden with info from other sources and a ton of exercises that I can’t see many people filling out, but the idea that I should somehow lose myself in dedication to work is terribly misguided. </p>
<p>Let’s break it down.</p>
<h2 id="First_Things_First"><a href="#First_Things_First" class="headerlink" title="First Things First"></a>First Things First</h2><p>I want to add some clarity to my thought process here. The most confused aspect of the aforementioned rule is that the terms used are not well-defined. I will do that here, defining what “work” actually means, and how it is a fundamentally different concept than your job or your career.</p>
<p>First, let’s talk about your <strong>work</strong>. Work is the list of assigned duties that you carry out, which often vary from day-to-day and may be transient in nature; you may be asked to perform a set of work for a prescribed period of time and later be assigned different work. For some people, their work will be consistent for the entirety of their employ, others it may change from month-to-month or day-to-day.  But this is a good segue as there is a difference between your work and your job.</p>
<p>Your <strong>job</strong> is the collection of work and tasks you perform in exchange for a pay cheque. Your job helps you meet your financial obligations and help to contribute to your household income. The tasks assigned are usually out of your control, though many forward-thinking organizations offer some freedom over long-term assignments and let you speak into the types of tasks you take on. Your experience in other, previous jobs will open doors for you to take on greater challenges in your next job, which may be within the same organization. Again, organizations that get this will help you form a path, leading you through more complicated work and increasingly important tasks en route to helping you move to more senior roles. Admittedly, not all career paths provide this opportunity, and that’s okay, too, the important thing is finding a job that supports your career.</p>
<p>Which leads me to the definition of <strong>career</strong>. Unlike the tasks you perform or the role you assume at a company, your career will never be fully articulated until you retire. That is, if retirement is indeed your endgame. If someone asks you what your career is today, your answer will likely be a point-in-time reflection of how you got to where you are. It is defined by the achievements you capture and the challenges you overcome. For some it will be a story of creativity and expression, for others it will be about dedication or service. </p>
<blockquote>
<p>I’d better drop a bonus definition in here: <strong>passion</strong>, in the context of “things you like to do”. Your passion is that thing that you’re likely thinking about or get easily distracted by. You’ve likely thought, “Someday I’d like to…” and completed that sentence with the thing that you want to be doing <em>now</em>. It can drive you and light you up and you are excited to talk about it with others. <em>That</em> is passion.</p>
</blockquote>
<p>Others still will explain their career as the vehicle they used to chase a passion, rather than something they were passionate about. As a concrete example example of that, I’ve demonstrated capabilities in software development and have been on this career path for 20 years now, writing code and leading teams. However, as much as I like writing code, my <em>passion</em> is actually learning, mentoring, sharing my work and teaching others. My career has allowed me to access my passion, and today I get to speak at conferences across North America and volunteer at the computer labs at local middle and high schools.</p>
<h2 id="What_You_Should_Really_Embrace"><a href="#What_You_Should_Really_Embrace" class="headerlink" title="What You Should Really Embrace"></a>What You Should Really Embrace</h2><p>Okay, so if you’re not going to embrace some kind of intertwined reality, what should you be chasing? </p>
<p>I believe the answer lies in sorting your crap out and remembering that the three things we talked about are tangible, distinct and sometimes disconnected or misaligned. Sometimes you won’t like the <strong>work</strong> you’re doing, but you will be completely happy with your <strong>job</strong>. Sometimes you take a <strong>job</strong> because you know you will enjoy the work for a period of time, but the <strong>job</strong> may not be helpful in advancing your <strong>career</strong>.</p>
<p>These things are okay, at least for a time. What you need to embrace is the fact that finding the perfect combination is very difficult, especially over the long haul. As your career objectives change, the job may no longer work for you as a tool to move down your career path. Sometimes you’ll have an incredible job - great employer, solid pay and awesome co-workers - but the work you’re assigned isn’t what you like to be doing. Some people – it’s happened to myself – will advance through an organization based on their performance into a role that they are not suitable for and will not find be successful at (this is known as the <a href="https://en.wikipedia.org/wiki/Peter_principle" target="_blank" rel="external">Peter Principle</a>).</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2016/01/Peters_principle.png" alt="Advancement through success can sometimes lead to failure"></p>
<p>Rather than thinking of things in rules, let’s instead think of things in truths. It is true that:</p>
<ul>
<li>You can have a job you love and be doing work that you don’t enjoy</li>
<li>The work you are doing may be fulfilling, but doesn’t give you opportunity to advance in your job</li>
<li>The job you have may serve you well today, but doesn’t align with your career</li>
<li>You can (and should try to) outgrow your job</li>
<li>What is considered a promotion by your employer may permanently lead to work that is not of your liking</li>
<li>Your choice in career may change, which can lead to instability in your happiness with your work and/or job</li>
<li>There is going to be work you don’t like to do in nearly every job you take</li>
<li>Your work, job and career may or may not help you operate inside your passion</li>
</ul>
<p>I don’t want to constantly attend to the negative, I want to focus on the things that are going right and look for signals that I am on the correct path. These green flags tell me that I am moving in the direction that I want to be in, and help me keep a healthy balance between my personal life and what I do in my job. When pondering where I’m at with my work, job and career, I ask myself questions from this reflection list:</p>
<ul>
<li>Do I have something to offer the people I work with and for?</li>
<li>Am I working with co-workers that can help me grow?</li>
<li>Is the work I am doing meaningful to me?</li>
<li>Does my job give me the freedom to think for myself?</li>
<li>Does the work I’m doing align with my ethics?</li>
<li>Is there a way for me to advance my career or follow my passion?</li>
<li>When I outgrow where I am, is there a place for me to go?</li>
<li>Does my job require effort within the bounds of a reasonable workday?</li>
<li>Am I still interested in the career story that is unfolding ahead of me?</li>
</ul>
<p>If I’ve got positive answers for several of these, I know I’m in a good spot. On the other hand, failing to meet my criteria here on a couple of points could be a sign that there needs to be a change of season. These questions may not be exactly what you need, but the exercise is what I believe we all need to embrace; the answers are dynamic and are going to change over time, so you need to find questions that help you identify your measure of happiness. </p>
<h2 id="An_Employer_u2019s_Role_in_Your_Work_2C_Job_and_Career"><a href="#An_Employer_u2019s_Role_in_Your_Work_2C_Job_and_Career" class="headerlink" title="An Employer’s Role in Your Work, Job and Career"></a>An Employer’s Role in Your Work, Job and Career</h2><p>In it’s simplest terms, I believe that an employer’s job begins with the assignment of meaningful, relevant tasks and ends with a paycheque. In between that space there is opportunity to challenge an employee, to contribute to their growth and provide guidance on how to develop their skills in such a way that it serves the company and helps to realize the goals of the individual, wherever possible. </p>
<p>As employees we have to concede that an employer is concerned with generating income in greater magnitude than expense as they execute the services their clients depend on. Even when we’re at a job we enjoy we will likely be tasked with actions we would not choose for ourselves. We need to be clear about our broader goals and, when appropriate, be honest when our <strong>work</strong> or our <strong>job</strong> is not checking off things from our reflection list.</p>
<p>If an employer is mentoring you to make your work part of your life, I boldly challenge you to push back and define strong bounds through which your work cannot cross. Someone in a mentorship role who guides employees with banter of blending work and life is clearly not interested in the career of the employee, and places higher weight on the importance of completed work than on the individual. I don’t want to work <em>there</em>. </p>
<h2 id="Why_Work_Isn_u2019t__u201CIntricately_Intertwined_u201D_With_Your_Life"><a href="#Why_Work_Isn_u2019t__u201CIntricately_Intertwined_u201D_With_Your_Life" class="headerlink" title="Why Work Isn’t “Intricately Intertwined” With Your Life"></a>Why Work Isn’t “Intricately Intertwined” With Your Life</h2><p>I will yield that the original post did not prescribe an explanation of “work”, which is why I have above, so I’ll argue this from the perspective of both “work” and “job” as I’ve defined in this article.</p>
<p>The separation of work is easy; work is a task and usually requires the context of your <em>work environment</em>. An engineer can’t complete blueprints without the requisite software, a counsellor cannot complete an evaluation without a patient and someone in janitorial cannot wax the floors without the buffing machine. And the floor. These are the types of things that can easily be slotted into your work schedule and, when you are good with time management, need not spill into your personal life on any regular frequency.</p>
<p>The separation of job and your life is a little less trivial. To avoid carrying the stress of the day home you need to have establish some good practices around “putting your tools down”, disconnecting from the office on your way <em>out</em> of the office. This is going to be something different for everybody, for me it involves tearing down my workspace, closing applications and checking code in. To prevent bigger picture concerns from affecting your home life such as the economy or the sustainability of the company you work at you need to regard your employment in the correct light, namely that it is part of your career, but likely doesn’t define it. And when your employer puts requirements into your job that breach your personal time, you will have some hard decisions to make.</p>
<p>Wherever you land, you need time to recharge. I agree with the sentiment from the original post that suggests multitasking can have a negative affect on you. How, then, can you intertwine work with playing with your kids? How do you answer emails when on a secluded retreat with your spouse? If getting in the zone is as easy as taking 10-15 minutes of focus, then do that <em>during the workday</em>. The important thing is to define the bounds of that workday and maintain them. </p>
<h2 id="Some_Well-Deserved_Exceptions"><a href="#Some_Well-Deserved_Exceptions" class="headerlink" title="Some Well-Deserved Exceptions"></a>Some Well-Deserved Exceptions</h2><p>I know some incredible folks who have taken entirely different walks of life than I. They have found success in ways that would not work for me, as I have found success in ways that may not work for you. Here are some scenarios where your workday may bleed more frequently into your personal life. </p>
<p><strong>The Self-Employed</strong> Running your own business is hard work. You may be working across time zones, you may have travel considerations and you need to react quickly to clients in order to collect the revenues you need to stay afloat.  </p>
<p><strong>Family Businesses</strong> While less common these days, the daily topics of family-run businesses will naturally find their way into conversations that happen outside of the work day. Reminders, follow-ups and even stress relief may happen when you find that every supper doubles as a staff party. </p>
<p><strong>Those Without Family</strong> I have friends who are not into the family scene and are living a single life. They have found that the cross-over tends to happen more naturally, but have also noted that they prefer to spend their time with friends or working on their career (versus servicing requests from work).</p>
<p><strong>When Travel is Required</strong> Travel is a tricky beast, but one that raises the requirement to really define when work starts and stops. As an obvious impairment to split out a normal work day, work-related travel increases the relevancy of strong boundaries when you are at home.  </p>
<p><strong>Crunch Times</strong> These are realities for most folks in most fields: as a project closes, an emergency arises or a deadline approaches, a little extra effort is going to be required. You’ll need to step up to successfully complete the tasks and stay in good standing with your employer.</p>
<p>In spite of these, I still believe that the cross-over time can be mitigated to a large degree. The important thing to do in these cases is to be more effective at communicating when the windows of work will be and ensuring that you have the support of those around you to help enforce it. Your husband or wife won’t know that you are expecting a call unless you’ve found a way to share it with them.</p>
<h2 id="What_to_do_With_All_of_This"><a href="#What_to_do_With_All_of_This" class="headerlink" title="What to do With All of This"></a>What to do With All of This</h2><p>First of all, don’t sell the farm. If you’re finding that something in your career, your job or your work is unsettling, make sure you have set of reasonable questions you can ask yourself to find out why. Talk with your employer about ways to make it right and, if needed, start to explore alternate work arrangements inside your organization, or outside of it.</p>
<p>One thing you can do, immediately, is to start blocking off time for your family and for you personally. This will help to give you time to connect with those that are important to you and reflect on what is becoming of your career. When I did this, I started to see - almost immediately - how I needed the time away from work in order to concentrate when I was there. It also paved the way for positive, sweeping changes in the time I spend with my wife and kids.</p>
<p>It would be remiss of me to omit some of the other beliefs that I have, namely that I put my family above my job, my ethics ahead of my work and my responsibility to my family’s obligations ahead of my personal interests. This means that I have had to make difficult decisions at times in order to maintain integrity and, to be honest, I suppose I’m still a long way out from knowing whether or not those were the right decisions. The best I can hope for is that hindsight reveals that the decisions were right at that time for who I was.</p>
<p>Here is <a href="http://joelfromcanada.com/gettingshitdone/" target="_blank" rel="external">the blog post I referenced</a>, if you’re interested.</p>
<p>I usually close by saying, “happy coding!” but in this case, this might be more appropriate: Happy career! :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You are <strong>always</strong> setting expectations. When you answer an email at 10pm, you are setting an expectation. When let a call go to voicemail at 6pm, you are setting an expectation.</p>
<p>These are difficult things to accept, especially if you’re in competition for advancement or your employer is challenging your boundaries on a regular basis, but just remember that resetting expectations is much more difficult that setting them in the first place. Remembering that every action you take (or don’t) defines how people will expect you to act in the future.<br>]]>
    
    </summary>
    
      <category term="Life Hack" scheme="http://jameschambers.com/tags/Life-Hack/"/>
    
      <category term="Practice of Awesome" scheme="http://jameschambers.com/tags/Practice-of-Awesome/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Humanitarian Toolbox AllReady Code-a-Thon]]></title>
    <link href="http://jameschambers.com/2015/11/the-humanitarian-toolbox-allready-code-a-thon/"/>
    <id>http://jameschambers.com/2015/11/the-humanitarian-toolbox-allready-code-a-thon/</id>
    <published>2015-11-18T15:22:00.000Z</published>
    <updated>2016-01-20T03:26:07.336Z</updated>
    <content type="html"><![CDATA[<p>I was recently in Seattle for the MVP Summit, one of the best ways to connect to product teams and really smart people from around the world. Every year I get to meet more of the team that builds the tools I use daily, reconnect with peers and catch up with friends. And I eat at Magiano’s.</p>
<p>But this year, the MVP Summit was trumped in awesomeness as quickly at it came to a close as the very next morning the code-a-thon for the Humanitarian Toolbox kicked into high gear.</p>
<a id="more"></a>
<p><strong><font color="#333333">Want to join the cause?</font></strong> The easiest way to get started is to join our weekly Saturday morning call. We are online from 10AM CST to Noon CST every Saturday. <a href="http://twitter.com/CanadianJames" target="_blank" rel="external">Watch Twitter –&gt;</a> for the link just before 10AM. </p>
<p>There are a lot of great projects out there. AllReady is great software with great purpose as well.</p>
<h2 id="Hack_for_a_Cause"><a href="#Hack_for_a_Cause" class="headerlink" title="Hack for a Cause"></a>Hack for a Cause</h2><p>Whenever disaster strikes a community – a forest fire, a tsunami, an earthquake – lives are impacted. Sadly, those with the fewest resources are often the ones at most risk after the disaster.</p>
<p>From November 6th to the 8th I was privileged to join in with about twenty other individuals from around the world to work on <a href="http://www.htbox.org/blog/allready-project-launched-at-visual-studio-2015-release-event" target="_blank" rel="external">AllReady</a>, an open source project that is curated by the Humanitarian Toolbox. AllReady is software that helps communities <em>organize</em> and <em>execute</em> efforts in preparedness so that those who are at risk are better equipped to make it out of a disaster in the best shape possible.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb.png" alt="image" title="image"></a></p>
<p>The group of us descended to the Garage at Building 27 on Microsoft Campus. We hunkered down, plowed through hundreds of commits and many dozens of issues and pull requests.</p>
<p>It was an amazing experience. It was a group of really smart people, supported by folks on the ASP.NET team, building software that is going to change lives.</p>
<p>To find out more about the awesome work that The Humanitarian Toolbox is doing, please <a href="http://htbox.org" target="_blank" rel="external">visit their site</a>.</p>
<h2 id="Hack_for_Yourself"><a href="#Hack_for_Yourself" class="headerlink" title="Hack for Yourself"></a>Hack for Yourself</h2><p>There is a huge draw to dive in and help with a project that can affect so many people and thwart the negative impact of unfortunate conditions. Preparedness is so much more effective than disaster recovery.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb1.png" alt="image" title="image"></a></p>
<p>So…it’s a good reason to get involved. But if that’s not enough, check out this tech stack:</p>
<ul>
<li>ASP.NET 5</li>
<li>MVC Framework 6</li>
<li>Azure Web Apps (Sites and Jobs)</li>
<li>Azure Storage (Tables and Queues)</li>
<li>AutoFac as the IoC container</li>
<li>MediatR as a messaging bus &amp; pub/sub provider</li>
<li>Entity Framework 7</li>
<li>GitHub and AppVeyor</li>
<li>SendGrid and Twilio</li>
</ul>
<p>I mean, <em>just look at that list</em>. That’s like…<strong>all</strong> the buzzwords. And jumping in to help on this project is also jumping in to learn. This is an opportunity to work with world-class developers on a project that is striving to have great architecture. It runs on the cloud in cloud-like ways and uses technology that is going to be used for the next 5-10 years and beyond. </p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image2.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb2.png" alt="image" title="image"></a></p>
<p>After the weekend, we drew to a close by having a retrospective where we worked through the next steps and where this project is headed. It’s exciting to see the momentum building as more community members come on board and start making commits.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/11/image3.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/11/image_thumb3.png" alt="image" title="image"></a></p>
<p>We’ve got a lot done in just a few weeks, and I’m excited to see it moving forward <em>daily</em>.&nbsp; </p>
<h2 id="Join_In_and_Start_Hacking"><a href="#Join_In_and_Start_Hacking" class="headerlink" title="Join In and Start Hacking"></a>Join In and Start Hacking</h2><p>The best part about the software is that everyone can contribute. I’m not going to lie, there are some advanced aspects of the project that will be hard to work through for junior developers. There are more aspects, still, that need the love of some senior developers. Regardless of where you are in the world or in your career, there is likely a task where you can get started. </p>
<ul>
<li>Fork the <a href="https://github.com/HTBox/allready" target="_blank" rel="external"><u>AllReady repo</u></a> on GitHub</li>
<li>Follow <a href="https://twitter.com/htbox" target="_blank" rel="external"><u>HTbox on Twitter</u></a></li>
<li>Read the <a href="http://www.htbox.org/blog" target="_blank" rel="external"><u>HTbox blog</u></a></li>
</ul>
<p>If you have questions, reach out to me <a href="http://twitter.com/CanadianJames" target="_blank" rel="external"><u>on Twitter</u></a> and I’ll help to get you started. </p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/11/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I was recently in Seattle for the MVP Summit, one of the best ways to connect to product teams and really smart people from around the world. Every year I get to meet more of the team that builds the tools I use daily, reconnect with peers and catch up with friends. And I eat at Magiano’s.</p>
<p>But this year, the MVP Summit was trumped in awesomeness as quickly at it came to a close as the very next morning the code-a-thon for the Humanitarian Toolbox kicked into high gear.</p>]]>
    
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="open source" scheme="http://jameschambers.com/tags/open-source/"/>
    
      <category term="Beyond Code" scheme="http://jameschambers.com/categories/Beyond-Code/"/>
    
      <category term="Conferences" scheme="http://jameschambers.com/categories/Beyond-Code/Conferences/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ApiController in ASP.NET 5? Nopesauce.]]></title>
    <link href="http://jameschambers.com/2015/11/apicontroller-in-asp-net-5-nopesauce/"/>
    <id>http://jameschambers.com/2015/11/apicontroller-in-asp-net-5-nopesauce/</id>
    <published>2015-11-03T04:39:31.000Z</published>
    <updated>2016-01-20T03:26:04.042Z</updated>
    <content type="html"><![CDATA[<p>If you’re developing in ASP.NET Web API you are familiar with the concept of inheriting from the base ApiController class. This class is still around in ASP.NET 5, but it is likely not meant for you to use.&nbsp; Here’s why your cheese has moved.</p>
<a id="more"></a>
<p><strong>TL;DR</strong>: Going forward, you’re going to inherit from Controller instead of ApiController, or from nothing at all. </p>
<h2 id="How_We_Used_to_Do_It"><a href="#How_We_Used_to_Do_It" class="headerlink" title="How We Used to Do It"></a>How We Used to Do It</h2><p>This is pretty much the bread and butter of a new controller in an old Web API 2.0 project:</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : ApiController<br>{<br>    [HttpGet]<br>    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()<br>    {<br>        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">“value1”</span>, <span class="str">“value2”</span> };<br>    }<br>}</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Nothing really too interesting here. We’re inheriting from a base class so we get some methods to leverage for return types, we can access the identity of the user through an IPrincipal and we have an HttpContext available to inspect the request and modify the response.</p>
<h2 id="How_to_Do_it_Now"><a href="#How_to_Do_it_Now" class="headerlink" title="How to Do it Now"></a>How to Do it Now</h2><p>In ASP.NET 5 we don’t have the ApiController to inherit from, at least not out of the box. Instead we inherit from the Controller class.</p>
<p><pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ValuesController : Controller<br>{<br>    [HttpGet]<br>    <span class="kwrd">public</span> IEnumerable&lt;<span class="kwrd">string</span>&gt; Get()<br>    {<br>        <span class="kwrd">return</span> <span class="kwrd">new</span> <span class="kwrd">string</span>[] { <span class="str">“value1”</span>, <span class="str">“value2”</span> };<br>    }<br>}</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Pretty easy, right? We actually have three less characters. Some pieces have moved around such as Request and Response objects that live as properties at the class level, and our User is now a ClaimsPrincipal instead of an IPrincipal. You’ll also find that there’s a host of other things that do not seem really relevant at first glance to Web API (things like the service resolver and TempData).</p>
<p>These extra bits are peripheral, however; the takeaway is actually that we no longer have two separate sets of classes that represent concerns like controllers or routing, and we can go about getting at the important parts of the request in the same way from both types of controllers – there really is just one now.</p>
<h2 id="If_You_Still_Want_to_Do_It_Now_How_We_Used_To"><a href="#If_You_Still_Want_to_Do_It_Now_How_We_Used_To" class="headerlink" title="If You Still Want to Do It Now How We Used To"></a>If You Still Want to Do It Now How We Used To</h2><p>There are perfectly good reasons to keep using the old format, perhaps you’re at the start of a port project or some have some other reason to stay as-was. No problem, you’re just going to have to pull in another package as it’s not part of your project template by default. Simply edit your project.json to include the following package:</p>
<p><pre class="csharpcode">Microsoft.AspNet.Mvc.WebApiCompatShim</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>While this <em>is</em> here and you _can _use it, it’s also likely a good time to evaluate if you <em>need</em> to use it. There are only a small set of refactorings that are required in order to use the unified interface and you can be </p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Make sure you’ve got <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">Visual Studio 2015</a>, you have <a href="http://docs.asp.net/en/latest/getting-started/installing-on-windows.html" target="_blank" rel="external">the latest beta installed</a> (at time of writing, beta 8), and give it a try. Happy coding <img src="https://jcblogimages.blob.core.windows.net/img/2015/11/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you’re developing in ASP.NET Web API you are familiar with the concept of inheriting from the base ApiController class. This class is still around in ASP.NET 5, but it is likely not meant for you to use.&nbsp; Here’s why your cheese has moved.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Web API" scheme="http://jameschambers.com/tags/Web-API/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Supporting Options and Arguments in Your dnx Commands]]></title>
    <link href="http://jameschambers.com/2015/09/supporting-options-and-arguments-in-your-dnx-commands/"/>
    <id>http://jameschambers.com/2015/09/supporting-options-and-arguments-in-your-dnx-commands/</id>
    <published>2015-09-08T18:00:00.000Z</published>
    <updated>2016-01-20T03:26:07.206Z</updated>
    <content type="html"><![CDATA[<p>Grab yourself your copy of <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external"><u>Visual Studio 2015</u></a> and buckle up! Today we’re going to create our own dnx command with support for options and arguments.</p>
<a id="more"></a>
<p>In my <a href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/"><u>previous post</u></a> on dnx commands I showed how you could create your own command as part of your project that could be invoked via the .Net Execution Environment, a.k.a., dnx. While this works fine in simple scenarios, chances are you might need to have more than one “command” embedded in your tooling. Right away you have concerns for parsing the arguments and options that are passed in, which will quickly lead to a more complex application than you were originally intending.</p>
<p><strong>Important Note</strong>&nbsp; I am building the samples here in this post on Beta 6, knowing that there are two changes coming in, the first is that they are dropping the project path argument to dnx (the period, or “current directory”), and the second being the high likelihood that there will continue to be refinements in the namespaces of these libraries. I’ll update these when I complete my upgrade to Beta 7.</p>
<h2 id="A_Real-world_Example"><a href="#A_Real-world_Example" class="headerlink" title="A Real-world Example"></a>A Real-world Example</h2><p>Consider Entity Framework, where you can access a number of different commands. It provides tooling to your application by making a number of commands related to your project, your entities, your database and your context available from the command line. This is great, because it also means that you can use it in automation tasks.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image2.png" alt="image" title="image"></p>
<p>Here’s the command as executed from the command line, followed by a call to get the help on a specific command, migration:</p>
<pre class="csharpcode">dnx . ef
dnx . ef migration -h</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

So, think about those switches for a second, and the mistakes and string manipulation you’d need to do to pull that all together. What about supporting help and organizing your commands? Being able to accept different options and arguments can grow to be an exhausting exercise in bloat…

## Unless!

…unless, of course, you had an abstraction over those parsing bits to work with.&nbsp; Quite wonderfully, Microsoft has made available the bits you need to take away those pains, and it all starts with the following package (and a bit of secret sauce):
<pre class="csharpcode">Microsoft.Framework.CommandLineUtils.Sources</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

And here’s the secret sauce…instead of using something like “1.0.0-*” for your version, use this instead: { "version": "1.0.0-*", "type": "build" }. This notation bakes the abstractions into your application so that you don’t have to bundle and distribute multiple DLLs/dependencies when you author and share commands.

The full version of the final, working project in this post is [available on GitHub](https://github.com/MisterJames/DnxCommandsWithOptsArgs/). Feel free to pull down a copy and try this out for yourself!

Let’s get started.

## Creating a Project

As [<u>previously covered</u>](http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/), creating an ASP.NET 5 command line app is all that is required to get started with creating your commands. We have to add that package as a dependency as well, which should look like this in it’s entirety in your project.json:
<pre class="csharpcode"><span class="str">"dependencies"</span>: {
  <span class="str">"Microsoft.Framework.CommandLineUtils.Sources"</span>: { <span class="str">"version"</span>: <span class="str">"1.0.0-*"</span>, <span class="str">"type"</span>: <span class="str">"build"</span> }
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Next, we need to make sure that our command is available and named as we’d like it to be called, which is also done in the project.json. Mine looks like this:
<pre class="csharpcode"><span class="str">"commands"</span>: {
  <span class="str">"sample-fu"</span>: <span class="str">"DnxCommandArguments"</span>
},</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

You can imagine, of course, that it will be invoked much like Entity Framework, but with “sample-fu” instead of “ef”. Feel free to name yours as you wish. With that out of the way, we can start to do the heavy lifting in getting our commands exposed to external tooling.

## Working with the CommandLineUtils Objects

Here is a bare-bones application that just displays it’s own help message:
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">int</span> Main(<span class="kwrd">string</span>[] args)
{
    var app = <span class="kwrd">new</span> CommandLineApplication
    {
        Name = <span class="str">"sample-fu"</span>,
        Description = <span class="str">"Runs different methods as dnx commands"</span>,
        FullName = <span class="str">"Sample-Fu - Your Do-nothing dnx Commandifier"</span>
    };

    <span class="rem">// show the help for the application</span>
    app.OnExecute(() =&gt;
    {
        app.ShowHelp();
        <span class="kwrd">return</span> 2;
    });

    <span class="kwrd">return</span> app.Execute(args);
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

You can see that our Main method is basically creating an instance of the CommandLineApplication class, initializing some properties and finally wiring up a Func to be executed at some point in the future.&nbsp; Main returns the result of app.Execute, which in turn handles the processing of anything passed in and itself returns the appropriate value (0 for success, anything else for non-success).&nbsp; Here it is in action (the completed version), simply by typing dnx . sample-fu at the commandline:

![image](https://jcblogimages.blob.core.windows.net/img/2015/09/image3.png "image")

A quick note here as well…the OnExecute() is called if no other command turns out to be appropriate to run, as determined by the internal handling in CommandLineApplication. In effect, we’re saying, “If the user passes nothing in, show the help.” Help is derived from the configuration of commands, so to illustrate that, we need to add one.

## Wiring Up a Command

Now we get into the fun stuff. Let’s write a command that takes a string as an argument and echos it right back out, and add an option to reverse the string.
<pre class="csharpcode">app.Command(<span class="str">"display"</span>, c =&gt;
{
    c.Description = <span class="str">"Displays a message of your choosing to console."</span>;

    var reverseOption = c.Option(<span class="str">"-r|--reverse"</span>, <span class="str">"Display the message in reverse"</span>, CommandOptionType.NoValue);
    var messageArg = c.Argument(<span class="str">"[message]"</span>, <span class="str">"The message you wish to display"</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        var message = messageArg.Value;
        <span class="kwrd">if</span> (reverseOption.HasValue())
        {
            message = <span class="kwrd">new</span> <span class="kwrd">string</span>(message.ToCharArray().Reverse().ToArray());
        }
        Console.WriteLine(message);
        <span class="kwrd">return</span> 0;
    });
});
</pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>Command takes a name and an action in which we can add our options and arguments and process the input as required.&nbsp; We write a Func for OnExecute here as well, which will be called if the user types the command “display”.&nbsp; The option is implemented as a “NoValue” option type, so the parser is not expecting any value…it’s either on the command line or it isn’t.

The order of args is important, using the pattern:

<font face="Lucida Console">&nbsp;&nbsp;&nbsp; COMMAND OPTIONS ARGUMENTS</font>

You’ll get some errors if you don’t follow that order (and there are some open GitHub issues to help make better parsing and error messages available).

## A More Complicated Example

Next up, let’s implement a command that can do one of two operations based on the option specified, and takes two values for an argument. Here a basic implementation of a calc method, supporting addition and multiplication:
<pre class="csharpcode"><span class="rem">//  the "calc" command</span>
app.Command(<span class="str">"calc"</span>, c =&gt;
{
    c.Description = <span class="str">"Evaluates arguments with the operation specified."</span>;

    var operationOption = c.Option(<span class="str">"-o|--operation &lt;OPERATION&gt;"</span>, <span class="str">"You can add or multiply the terms specified using 'add' or 'mul'."</span>, CommandOptionType.SingleValue);
    var termsArg = c.Argument(<span class="str">"[terms]"</span>, <span class="str">"The numbers to use as a term"</span>, <span class="kwrd">true</span>);
    c.HelpOption(<span class="str">"-?|-h|--help"</span>);

    c.OnExecute(() =&gt;
    {
        <span class="rem">// check to see if we got what we were expecting</span>
        <span class="kwrd">if</span> (!operationOption.HasValue())
        {
            Console.WriteLine(<span class="str">"No operation specified."</span>);
            <span class="kwrd">return</span> 1;
        }
        <span class="kwrd">if</span> (termsArg.Values.Count != 2)
        {
            Console.WriteLine(<span class="str">"You must specify exactly 2 terms."</span>);
            <span class="kwrd">return</span> 1;
        }

        <span class="rem">// perform the operation</span>
        var operation = operationOption.Value();
        var term1 = <span class="kwrd">int</span>.Parse(termsArg.Values[0]);
        var term2 = <span class="kwrd">int</span>.Parse(termsArg.Values[1]);
        <span class="kwrd">if</span> (operation.ToLower() == <span class="str">"mul"</span>)
        {
            var result = term1 * term2;
            Console.WriteLine($<span class="str">" {term1} x {term2} = {result}"</span>);
        }
        <span class="kwrd">else</span>
        {
            var result = term1 + term2;
            Console.WriteLine($<span class="str">" {term1} + {term2} = {result}"</span>);
        }
        <span class="kwrd">return</span> 0;
    });
});</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Of note are the differences between the options and the arguments versus the first command. The option accepts one of two values, and the argument can accept exactly two values. We have to do a bit of validation on our own here, but these are the basic mechanics of getting commands working.</p>
<p>Taking it to the next level, you may wish to encapsulate your code in a class, or leverage the fact that DNX (and thus, your commands) are aware of the project context that you are running in…remember that if you are running in a project directory, you have the ability to read from the project.json.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Be sure to grab <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external"><u>Visual Studio 2015</u></a> and then start experimenting with commands. You can have a look at some of the other repos/projects that leverage CommandLineUtils, or check out the <u><a href="https://github.com/MisterJames/DnxCommandsWithOptsArgs/" target="_blank" rel="external">completed project from this post on GitHub</a></u>.</p>
<p>Happy Coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/09/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Grab yourself your copy of <a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205"><u>Visual Studio 2015</u></a> and buckle up! Today we’re going to create our own dnx command with support for options and arguments.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="DNX" scheme="http://jameschambers.com/tags/DNX/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Upgrading NPM in Visual Studio 2015]]></title>
    <link href="http://jameschambers.com/2015/09/upgrading-npm-in-visual-studio-2015/"/>
    <id>http://jameschambers.com/2015/09/upgrading-npm-in-visual-studio-2015/</id>
    <published>2015-09-02T08:15:17.000Z</published>
    <updated>2016-01-20T03:26:07.550Z</updated>
    <content type="html"><![CDATA[<p>Visual Studio 2015 (<u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">download here</a></u>) ships with it’s own version of several external tools, such as grunt, node and npm.&nbsp; Typically, you’d have to wait for newer versions of VS to ship if you want them updated. <a id="more"></a>If you are wanting to take advantage of newer versions of these tools, you have three options:</p>
<ol>
<li>Wait for VS 2015 to upgrade the tooling and ship an update.</li>
<li>Hack the tooling proxies used by Visual Studio.</li>
<li>Use the built-in external tool path editor to slip your updated versions in.</li>
</ol>
<p>Waiting for updates is no fun. Let’s hack a little.</p>
<h2 id="Wait_a_minute_21_Why_are_we_doing_this_3F"><a href="#Wait_a_minute_21_Why_are_we_doing_this_3F" class="headerlink" title="Wait a minute! Why are we doing this?"></a>Wait a minute! Why are we doing this?</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/09/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image_thumb.png" alt="image" title="image"></a>For me the primary motivator was the path length limitations in Windows. Nested node_modules folders buried 19 levels deep is no fun when you hit the max path length. For me, I was trying to share the files on OneDrive and hit 255 characters pretty quickly.</p>
<p>Older versions of npm resolved package dependencies by pulling in a package, creating a node_modules folder inside of it, then putting all the packages in there. Except, of course, if one of those packages contained more dependencies, then we were into the recursive bits of package resolution and very deep paths, ultimately toppling a lot of Windows tooling.</p>
<p>The latest major version of npm – version 3.0.x and above – creates a flat store of packages (very similar to what we know in NuGet) and only pulls one copy of each required version of each required package. Much nicer. So, back to the dicing!</p>
<h2 id="Hacking_up_the_VS_Tooling_Proxies"><a href="#Hacking_up_the_VS_Tooling_Proxies" class="headerlink" title="Hacking up the VS Tooling Proxies"></a>Hacking up the VS Tooling Proxies</h2><p>These are pretty straightforward, once you find them. For me, they were located in the following directory:</p>
<p>C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\Microsoft\Web Tools\External</p>
<p>For example, here the entire contents of npm.cmd:</p>
<p><pre class="csharpcode"><span class="str">@”%~dp0\node\node”</span> <span class="str">“%~dp0\npm\node_modules\npm\bin\npm-cli.js”</span> %<em></em></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /</em>white-space: pre;*/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>The %~dp0 is the old command line way of bringing the current drive letter (the d in the command), the path (the letter p here) and the current directory of the executing script (represented by 0) into context. So, basically, “start from where you’re running”. It’s a very hard-to-read version of “.” in most other notations. So, the command is running node (which is an exe), passing in the VS version of npm, and pushing into it the rest of the parameters that were passed along. So, when VS issues an “npm install”, this command kicks in, runs npm via node and passes “install” as the command to npm. </p>
<p>With that knowledge, we can simply update the call that is proxied through to our current version. I installed node (which includes npm), then updated npm to the latest version (thanks to <a href="https://www.npmjs.com/package/npm-windows-upgrade" target="_blank" rel="external"><u>this module</u></a>) and updated my npm.cmd to the following:</p>
<p><pre class="csharpcode"><span class="str">@”C:\Program Files (x86)\nodejs\node.exe”</span> <span class="str">“C:\Program Files (x86)\nodejs\node_modules\npm\bin\npm-cli.js”</span> %<em></em></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /</em>white-space: pre;*/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>Of course, here be dragons: I have no idea how stable this will be with updates to VS, and/or how badly you may be crippling features if you mess this up. So, make sure you take a backup of your scripts before modifying them.&nbsp; This will be super-handy if you have some other requirement – like the order of params on tooling changes – but otherwise likely isn’t needed. Thankfully, there is a UI-way of doing this, too.</p>
<h2 id="Not_Hacking_Your_Visual_Studio_Tooling"><a href="#Not_Hacking_Your_Visual_Studio_Tooling" class="headerlink" title="Not Hacking Your Visual Studio Tooling"></a>Not Hacking Your Visual Studio Tooling</h2><p>Probably a more pleasing solution for your boss.</p>
<p>This one is pretty straightforward as well, and can be done by right-clicking on the “Dependencies” node in Solution Explorer, or by typing “external web tools” in the QuickLaunch bar. </p>
<p>From here, just add a new entry and move it to the top. For me, npm is located in the nodejs install directory, and this is good enough to get VS to see it first.</p>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/09/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/09/image_thumb1.png" alt="image" title="image"></a></p>
<p>Note, I did seem to have some issues with caching and/or gremlins here, so you may need to restart Visual Studio for the tooling paths to be picked up.</p>
<h2 id="What_I_Don_u2019t_Like"><a href="#What_I_Don_u2019t_Like" class="headerlink" title="What I Don’t Like"></a>What I Don’t Like</h2><p>Couple of things here that I don’t care for:</p>
<ol>
<li><strong>Not consistent between team members</strong>: there seems to be no way to put in your solution/project a hint at the version of tooling you wish to use. In my case, a developer with npm 2 trying to run an install off of OneDrive would fail.</li>
<li><strong>Visual Studio external tools are internal</strong>: yeah, you read that right. I’m not a fan of the way these projects are packed in, in such a way that the path to update them or pick versions is non-obvious.</li>
</ol>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>Not too much to do, but if you run into long paths, nested node_modules kicking your butt or other out-of-date tooling, this should get you on your way.</p>
<p>Make sure you grab your <u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205" target="_blank" rel="external">copy of VS 2015</a></u> and start diving into the next phase of our careers!</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/09/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Visual Studio 2015 (<u><a href="https://www.visualstudio.com/?Wt.mc_id=DX_MVP4038205">download here</a></u>) ships with it’s own version of several external tools, such as grunt, node and npm.&nbsp; Typically, you’d have to wait for newer versions of VS to ship if you want them updated.]]>
    
    </summary>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="node" scheme="http://jameschambers.com/tags/node/"/>
    
      <category term="npm" scheme="http://jameschambers.com/tags/npm/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Writing Custom Commands for DNX with ASP.NET 5.0]]></title>
    <link href="http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/"/>
    <id>http://jameschambers.com/2015/08/writing-custom-commands-for-dnx-with-asp-net-5-0/</id>
    <published>2015-08-11T07:30:07.000Z</published>
    <updated>2016-01-20T03:26:07.992Z</updated>
    <content type="html"><![CDATA[<p>If you are a developer on the .NET stack, you’ve now got access to a great new extension to your development environment. DNX, or the .NET Execution Environment, is a powerful new extensibility point that you can leverage to build project extensions, cross-platform utilities, build-time extensions and support for automation. In this article I’ll walk you through the process of building your own custom DNX command on top of ASP.NET 5.0.</p>
<a id="more"></a>
<h2 id="Where_You_u2019ve_Seen_It"><a href="#Where_You_u2019ve_Seen_It" class="headerlink" title="Where You’ve Seen It"></a>Where You’ve Seen It</h2><p>DNX has the ability to scan a project.json and look for commands that you install as packages or that you create yourself. If you’ve started following the examples of the MVC Framework or perhaps with Entity Framework, you may have seen things like this in your project.json:</p>
<pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"web"</span>: <span class="str">"Microsoft.AspNet.Hosting --config hosting.ini"</span>,
    <span class="str">"ef"</span>: <span class="str">"EntityFramework.Commands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

[![image](https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb2.png "image")](https://jcblogimages.blob.core.windows.net/img/2015/08/image5.png)These entries are here so that DNX understands the alias you assign (such as “web” or “ef”) and how it maps to an assembly that you’ve created or taken on as a dependency.&nbsp; The EF reference is quite straightforward above, simply saying that any call to “ef” via DNX will go into the entry point in EntityFramework.Commands.&nbsp; You would invoke that as follows from the directory of your _project_:
<pre class="csharpcode">dnx . ef </pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

All parameters that are passed in are available to you as well, so if you were to instead use:
<pre class="csharpcode">dnx . ef help migration</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Then EF would be getting the params “help migrations” to parse and process. As can be clearly seen in the “web” alias, you can also specify defaults that get passed into the command when it is executed, thus, the call to web in the above project.json passes in the path and filename of the configuration file to be used when starting IIS express. 

There is no special meaning to “ef” or “web”. These are just names that you assign so that the correct mapping can be made. If you changed “ef” to “right-said-fred” you would be able to run migrations from the command line like so:
<pre class="csharpcode">dnx . right-said-fred migration add too-sexy</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Great! So you can create commands, pass in parameters and share these commands through the project.json file. But now what?

## Now What?

I’m so glad you asked!

So far things really aren’t too different from any other console app you might create. I mean, you can parse args and do whatever you like in those apps as well.

But here’s the winner-winner-chicken-dinner bits: did you notice the “.” that is passed into DNX? That is actually the path to the project.json file, and this is important. 

*Important Note*: From beta 7 onward (or already if you’re on the nightly builds) DNX will implicitly run with an appbase of the current directory, removing the need for the “.” in the command. I’ll try to remember to come back to this post to correct that when beta 7 is out in the wild. Read more about the change on the [ASP.NET Announcement repo](https://github.com/aspnet/Announcements/issues/52) on GitHub.

DNX doesn’t actually do a lot on its own, not other than providing an execution context under which you can run your commands. But this is a good thing! By passing in the path to a project.json, you feed DNX the command mappings that you want to use, and in turn, DNX provides you with all of the benefits of running inside of the ASP.NET 5.0 bits. Your console app just got access to Dependency Injection as a first-class citizen in your project, with access to information about whichever app it was that contained that project.json file.&nbsp; 

Consider the EF command mapping again for migrations for a second: what is going on when you tell it to add a migration?&nbsp; It goes something like this:

1.  DNX looks for the project.json at the path you provide
2.  It parses the project.json file and finds the command mapping associated with your statement
3.  I **_creates an instance_** of the class that contains your command, injecting environment and project information as is available
4.  It checks the rest of what you’ve passed in, and invokes the command, passing in any parameters that you’ve supplied

## How to Build Your Own

This is actually super easy!&nbsp; Here’s what you need to do:

1.  Create a new ASP.NET 5 Console Application in Visual Studio 2015
2.  Add any services interfaces you need as parameters to the constructor of the Program class – but this is optional in the “hello dnx” realm of requirements
3.  Add your logic to your Main method – start with something as simple as a Console.WriteLine statement

From there, you can drop to a command line and run your command. That’s it!

*Pro Tip* You can easily get a command line in your project folder by right-clicking on the project in Solution Explorer and selecting “Open Folder in File Explorer”. When File Explorer opens, simply type in “cmd” or “powershell” in the location bar and you’ll get your shell.

The secret as to why it works from the console can be found in your project.json: when you create a console app from the project templates, the command alias mapping for your project is automatically added to your project.&nbsp; In this same way, along with referencing your new command project, _other projects_ can now consume your command.

## Beyond Hello World

It is far more likely that you’re going to need to do something in the context of the project which uses your command. Minimally, you’re likely going to need some configuration drawn in as a default or as a parameter in your command. Let’s look at how you would take that hello world app you created in three steps and do something a little more meaningful with it.

First, let’s add some dependencies to your project.json:

<pre class="csharpcode">  <span class="str">"dependencies"</span>: {
    <span class="str">"Microsoft.Framework.Runtime.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Abstractions"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.Json"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.UserSecrets"</span>: <span class="str">"1.0.0-beta6"</span>,
    <span class="str">"Microsoft.Framework.Configuration.CommandLine"</span>: <span class="str">"1.0.0-beta6"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Now let’s add a new JSON file to our project called config.json with the following contents:

<pre class="csharpcode">{
  <span class="str">"command-text"</span>: <span class="str">"Say hello to my little DNX"</span>
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Getting there. Next, let’s bulk up the constructor of the Program class, add a private member and a Configuration property:

<pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">readonly</span> IApplicationEnvironment _appEnv;

<span class="kwrd">public</span> Program(IApplicationEnvironment appEnv)
{
    _appEnv = appEnv;
}

<span class="kwrd">public</span> IConfiguration Configuration { get; set; }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

We also need to add a method to Program that handles loading the config, taking in what it can from the config file, but loading on top of that any arguments passed in from the console:
<pre class="csharpcode"><span class="kwrd">private</span> <span class="kwrd">void</span> BuildConfiguration(<span class="kwrd">string</span>[] args)
{
    var builder = <span class="kwrd">new</span> ConfigurationBuilder(_appEnv.ApplicationBasePath)
        .AddJsonFile(<span class="str">"config.json"</span>)
        .AddCommandLine(args);

    Configuration = builder.Build();
}</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

Finally, we’ll add a little more meat to our our Main method:
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">void</span> Main(<span class="kwrd">string</span>[] args)
{
    BuildConfiguration(args);

    Console.WriteLine(Configuration.Get(<span class="str">"command-text"</span>));
    Console.ReadLine();
}</pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>The above sample can now be executed as a command. I’ve got the following command mapping in my project.json file (yes, the same project you use to create the command can also expose the command):
<pre class="csharpcode">  <span class="str">"commands"</span>: {
    <span class="str">"DnxCommands"</span>: <span class="str">"DnxCommands"</span>
  }</pre><style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>This means that from the console in the dir of my project I can just type in the following: </p>
<p><pre class="csharpcode">dnx . DnxCommands</pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>I can also now reference this project from any other project (or push my bits to NuGet and share them to any project) and use the command from there. Other projects can add the “command-text” key to their config.json files and specify their own value, or they can feed in the parameter as an arg to the command:</p>
<p><pre class="csharpcode">dnx . DnxCommands command-text=<span class="str">“‘Pop!’ goes the weasel”</span></pre><style type="text/css">.csharpcode, .csharpcode pre<br>{<br>    font-size: small;<br>    color: black;<br>    font-family: consolas, “Courier New”, courier, monospace;<br>    background-color: #ffffff;<br>    /<em>white-space: pre;</em>/<br>}<br>.csharpcode pre { margin: 0em; }<br>.csharpcode .rem { color: #008000; }<br>.csharpcode .kwrd { color: #0000ff; }<br>.csharpcode .str { color: #006080; }<br>.csharpcode .op { color: #0000c0; }<br>.csharpcode .preproc { color: #cc6633; }<br>.csharpcode .asp { background-color: #ffff00; }<br>.csharpcode .html { color: #800000; }<br>.csharpcode .attr { color: #ff0000; }<br>.csharpcode .alt<br>{<br>    background-color: #f4f4f4;<br>    width: 100%;<br>    margin: 0em;<br>}<br>.csharpcode .lnum { color: #606060; }<br></style></p>
<p>In my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank" rel="external">sample solution on GitHub</a>, I also have a second project which renames the alias and has it’s own config file that is read in by the command.</p>
<h2 id="Next_Steps"><a href="#Next_Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><p>All of this opens the doors for some pretty powerful scenarios. Think about what you can do in your build pipeline without having to write, expose and consume custom msbuild targets. You can create commands that are used to build up local databases for new environments or automate the seeding of tables for integration tests. You could add scaffolders and image optimizers and deployment tools and send text messages to your Grandma. </p>
<p>What you should do next is to look at the kinds of things you do when you’re working on your solution – not in it – and think about how you might be able to simplify those tasks. If there are complex parts of your build scripts that you encounter from one project to the next, perhaps you can abstract some of those bits away into a command and then shift to using simplified build scripts that invoke your commands via DNX.</p>
<p>To get some inspiration, check out my <a href="https://github.com/MisterJames/DnxCommands/" target="_blank" rel="external">sample project on GitHub</a>, the DNX commands for other libraries (such as <a href="https://github.com/aspnet/EntityFramework/tree/dev/src/EntityFramework.Commands" target="_blank" rel="external">EF</a> or <a href="https://github.com/xunit/dnx.xunit/" target="_blank" rel="external">xUnit</a>) and try writing a few of your own.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/08/wlEmoticon-smile1.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are a developer on the .NET stack, you’ve now got access to a great new extension to your development environment. DNX, or the .NET Execution Environment, is a powerful new extensibility point that you can leverage to build project extensions, cross-platform utilities, build-time extensions and support for automation. In this article I’ll walk you through the process of building your own custom DNX command on top of ASP.NET 5.0.</p>]]>
    
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Converting .NET 4.6 Projects to the VS 2015 Project System]]></title>
    <link href="http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/"/>
    <id>http://jameschambers.com/2015/08/converting-net-4-6-projects-to-the-vs-2015-project-system/</id>
    <published>2015-08-10T19:47:06.000Z</published>
    <updated>2016-01-20T03:26:04.656Z</updated>
    <content type="html"><![CDATA[<p>To take advantage of multi-targeted outputs from our project – allowing our assemblies to be used from multiple frameworks across the organization – we want to upgrade our projects to use the new project system in Visual Studio 2015. Previously, we would have needed a base project and then a separate project for each framework target (PCL, 4.5, 3.5, 4.5.2, etc), but in today’s solutions we can have a single project output all of the assets we wish to support.</p>
<p><em>In this series we’re working through the conversion of <a href="http://clear-measure.com/" target="_blank" rel="external">Clear Measure’s</a> <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/" target="_blank" rel="external">Bootcamp MVC</a> 5-based application and migrating it to MVC 6. You can track the entire series of posts from the </em><a href="http://jameschambers.com/2015/07/upgrading-a-real-world-mvc-5-application-to-mvc-6/"><em>intro page</em></a><em>.</em></p>
<h2 id="Recreating_the_Solution_and_Projects"><a href="#Recreating_the_Solution_and_Projects" class="headerlink" title="Recreating the Solution and Projects"></a>Recreating the Solution and Projects</h2><p>As of right now, there are no tools in place that would support an in-place migration from the old project system to the new one. Because we wanted to preserve project naming and namespaces, I copied everything out into a new directory – the solution and the projects – and rebuilt the solution from scratch.</p>
<p>I would anticipate a project conversion process at some point, even one that was able to provide the basics (like moving package dependencies to project.json) and guidance on the remaining pieces (like why part of the project wasn’t able to convert, and how you might approach it). This post will walk through those steps of the conversion, but it will be done manually.</p>
<p>I wanted to maintain all the same names of the assemblies, namespaces and outputs, and the only way to currently do this is to clear out the src folder and start over. Don’t worry, our code is still good, we just have to wrangle it into new containers.</p>
<h2 id="Step_0_3A_Folder_Reorganization"><a href="#Step_0_3A_Folder_Reorganization" class="headerlink" title="Step 0: Folder Reorganization"></a>Step 0: Folder Reorganization</h2><p>One of the first changes that I made was a reorganization of the tooling that is used to support the build. Some of the build script relied on packages existing on disk (NUnit’s console runner, AliaSql) but this is an order-of-operations problem. When you grab the solution from the repo, you’re not actually able to build it until you restore the packages. Further, these assets are <strong>solution-level </strong>concerns, not project-level concerns, so which project do you install them into? NuGet does not have the concept of solution-level packages that apply to the solution itself, so while it works perfectly well for projects, NuGet is inherently not ideal for incorporating solution dependencies.</p>
<p>To remedy this, I have moved these types of assets into a tools folder and updated the build scripts accordingly. This approach is likely a matter of opinion more than anything, but the reality is that we want the directory structure to reflect which concerns <strong><u>are in</u></strong> the solution versus which concerns <strong><u>work on</u></strong> the solution.</p>
<p>I would like to note that there are still improvements to be made here – for instance, I know many teams actually have build scripts that are capable of not only restoring packages, but have the ability to go and grab NuGet itself – so expect some more changes as we continue to move through this migration. Automation is <em>awesome</em>.</p>
<h2 id="Step_1__u2013_Core"><a href="#Step_1__u2013_Core" class="headerlink" title="Step 1 – Core"></a>Step 1 – Core</h2><p><a href="https://jcblogimages.blob.core.windows.net/img/2015/08/image.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb.png" alt="image" title="image"></a>Our Core project was a breeze to port because it’s at the heart of the system in an <a href="/jeffreypalermo.com/blog/the-onion-architecture-part-1/">Onion Architecture</a> and takes on very few dependencies. I started the conversion by going through the motions of creating a new Core project, using the DLL project from the “Web Templates” part of the dialog.&nbsp; The first project also creates the solution, and the convention for the way the solutions are laid out on disk has changed.</p>
<p>So…the build broke.</p>
<p>Thankfully, this was easy to resolve with just a couple of quick fixes, but you’ll likely have to take similar steps on your project:</p>
<ul>
<li>First, update your paths to point at the correct location on disk</li>
<li>Second, comment out all the build steps that have to come later, like running unit or integration tests</li>
</ul>
<p><a href="https://jcblogimages.blob.core.windows.net/img/2015/08/image1.png" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image_thumb1.png" alt="image" title="image"></a>We can’t run unit tests quite yet (we need to convert those projects as well), but we can make sure that the project is building correctly.</p>
<p>We’re not modifying code at this point, so provided we can get the solution building we can have a good level of confidence – but not a guarantee – that our code is still in good shape. We want those tests back online before we merge this branch back to develop.</p>
<p>With the build running, I was able to jump back into Visual Studio and start adding back the code. In my case, nearly everything worked just by copying in the files from my backup location and pasting them into the project. It’s a bit tedious, but it’s by no means difficult or complicated.</p>
<p>The only package that I had to add at this point was a legacy dependency from NHibernate, namely the Iesi.Collections package. This is done by opening up the project.json for Core and updating the “dependencies” part of the project file. As soon as you save the file out, Visual Studio goes off and runs a background install of the packages that it finds you’ve put in there, along with any dependencies of those packages.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image2.png" alt="image" title="image"></p>
<p>Finding the right package and most recent version is quite easy in the project.json world. As you start typing a package name, in-line search kicks in and starts suggesting matches. Available versions of the packages are displayed, and VS indicates if those packages are available locally in a cache or found on a remote NuGet repository, indicated by the icon you see. All packages sources are queried for package information, so you can get packages and their version information from private repositories as well.</p>
<p>Once the packages were restored the solution built fine in Visual Studio 2015 and I was able to return to my console to run the build script.</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image3.png" alt="image" title="image"></p>
<h2 id="Step_2_3A_Data_Access"><a href="#Step_2_3A_Data_Access" class="headerlink" title="Step 2: Data Access"></a>Step 2: Data Access</h2><p>Other than the fact that Data Access has a few more dependencies, it was really more of the same to get the Data Access project online and building through our script. I added another DLL to the solution, added the source files and installed the dependencies via project.json.</p>
<p>When I compiled the project at this point, some of the changes of the .NET Framework and the strategy of the team started to surface. For instance, typically you might find a reference to System.Data from your GAC in a project, however, in the new cross-platform project system and under the assumption that you may not have a GAC at all, the .NET folks have taken the mantra of “NuGet all the things.” To get access to the System.Data namespace and the IDataReader interface that was used in the DataAccess project, I had to add a reference to System.Data version 4.0.0 from NuGet (via project.json).</p>
<p>Other projects will have similar hits on moved packages. It is likely safe to use the GAC in situations where you know what the build environment looks like and are sure that build agents and other developers will have access to the required dependencies. But it is a more stable approach – and a better chance to successful compile our application – to instead reference those binaries from a package repository.</p>
<p>The other notable piece was in how we reference other projects in our own solution; today they look a lot like referencing other packages. Whether you go through the Add Reference dialog or if you prefer to edit the project file by hand, you’re going to also need to introduce a dependency on Core, which is done simply by adding the following line to the dependencies:</p>
<pre class="csharpcode"><span class="str">"Core"</span>: <span class="str">"1.0.0-*"</span></pre>

<style type="text/css">.csharpcode, .csharpcode pre
{
    font-size: small;
    color: black;
    font-family: consolas, "Courier New", courier, monospace;
    background-color: #ffffff;
    /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
    background-color: #f4f4f4;
    width: 100%;
    margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>

<p>Excellent! Almost ready to build!</p>
<h2 id="Step_3_3A_Clean_Up"><a href="#Step_3_3A_Clean_Up" class="headerlink" title="Step 3: Clean Up"></a>Step 3: Clean Up</h2><p>Just a couple of other notes that I took and a couple of tips I’ve learned as I created these projects:</p>
<ul>
<li>You’ll have to set the default namespaces so that new classes that are introduced adhere to your conventions</li>
<li>You need to enable the “Produce outputs on build” in order for your project to build a NuGet package (this is in the build options)</li>
</ul>
<p>You’re also in charge of wiring up any dependencies your modules need where they aren’t satisfied with a single package for all output types. For instance, when I tried a small gamut of output targets I ran into this problem:</p>
<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/08/image4.png" alt="image" title="image"></p>
<p>The new .NET Platform (the base for Windows, web, mobile and x-plat) was not supported given the dependencies I have listed in my project, namely it is the IESI Collections that is the problem here. Ideally, you want to be able to support as many runtimes as possible, so you want to target the lowest common denominator. That is likely going to be “dotnet” going forward (which could in turn be used to build up applications for web, Windows or phone) but more realistically things like “net46”, which is just the 4.6 version of .NET, or “dnx46”, which is the new bits (think MVC Framework) running on top of .NET 4.6. In the cases where you don’t have a package that matches the target you need, you have a couple of choices, listed in order of easiest to most difficult:</p>
<ul>
<li>Contact the package authors to see if there is a new version coming</li>
<li>If it’s open source, contribute and get an output built for dotnet</li>
<li>Add runtime-specific dependencies to get the project building, then use compiler switches to implement different blocks of code based on the target framework</li>
<li>Switch off of that version of the package, or switch to an alternate package to get the same functionality and then update your code as required</li>
</ul>
<p>Sadly, that last one is likely the way we’re going to need to go, especially if we want to target x-plat development. This is not an easy task, but getting to this point in the migration is and only takes a couple of hours. If you haven’t done this sanity check in your project to identify packages that may cause issues during migrations, I would suggest that your assessment is not complete.</p>
<p>For the time being, we are concerned about supporting .NET 4.6 and DNX running on 4.6 for our project, so that is where I have left things. This is a reasonable compromise allowing continued development in web and Windows.</p>
<h2 id="Moving_On"><a href="#Moving_On" class="headerlink" title="Moving On"></a>Moving On</h2><p>The main tenets of our application are now alive and kicking in our Visual Studio 2015 solution with the new project system in place. In the next post in this series we’ll have a look at getting the tests online and updating the build script to execute our tests.</p>
<p>If you’d like to follow along with the progression as we get this fully converted you can check out <a href="https://github.com/ClearMeasureLabs/ClearMeasureBootcamp/tree/refactor/move-to46-with-multitargetting" target="_blank" rel="external">the branch on GitHub</a>.</p>
<p>Happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/08/wlEmoticon-smile.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>To take advantage of multi-targeted outputs from our project – allowing our assemblies to be used from multiple frameworks across the org]]>
    </summary>
    
      <category term="Asp.Net MVC" scheme="http://jameschambers.com/tags/Asp-Net-MVC/"/>
    
      <category term="MVC6" scheme="http://jameschambers.com/tags/MVC6/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
      <category term="MVC6 Conversion" scheme="http://jameschambers.com/categories/Code-Dive/MVC6-Conversion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Launching An ASP.NET 5 Application from Visual Studio 2015]]></title>
    <link href="http://jameschambers.com/2015/07/launching-an-asp-net-5-application-from-visual-studio-2015/"/>
    <id>http://jameschambers.com/2015/07/launching-an-asp-net-5-application-from-visual-studio-2015/</id>
    <published>2015-07-29T19:00:00.000Z</published>
    <updated>2016-01-20T03:26:06.249Z</updated>
    <content type="html"><![CDATA[<p>If you are trying to use any DNX (DotNet Execution) runtime other than dnx451 (i.e. dnx452, dnx46) you will run into the following error when running the application from Visual Studio 2015, when used with the initial release of the Beta 6 tooling:</p>
<blockquote>
<p><strong>The current runtime target framework is not compatible with ‘YourWebApplication’.</strong></p>
<p>Current runtime Target Framework: ‘DNX,Version=v4.5.1 (dnx451)’<br> Type: CLR<br> Architecture: x64<br> Version: 1.0.0-beta6-12256</p>
</blockquote>
<p>If you’re instead running with a debugger attached, you won’t hit a breakpoint, you’ll only get a 500. It doesn’t matter what framework runtimes you have installed on your machine. It doesn’t matter what your global.json says or what dependencies or frameworks you take or specify in project.json.</p><p>This is because the default runtime for launching IIS Express from Visual Studio is indeed dnx451. You can get around this in one of two ways:</p>
<ol>
<li>Launch the website from the command line in your project directory using the command “dnx . web”. Web is a command that is exposed in your project.json and shares the needed info (config) to launch a project-specific instance of IIS.</li>
<li>In your project properties (right-click, properties from Solution Explorer), add the following environment variable in the Debug tab:<br>&nbsp;&nbsp;&nbsp;&nbsp; DNX_IIS_RUNTIME_FRAMEWORK = dnx46<p><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image25.png" alt="image" title="image"></p></li>
</ol>
<p>A huge thanks goes out to <a href="https://twitter.com/anurse" target="_blank" rel="external">Andrew Nurse</a> for providing a resolution on <a href="http://stackoverflow.com/questions/31671851/vs-2015-setting-right-target-framework-for-asp-net-5-web-project/31687529#31687529" target="_blank" rel="external">this matter</a> and responding to <a href="https://github.com/aspnet/dnx/issues/2367" target="_blank" rel="external">my issue</a> on GitHub.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you are trying to use any DNX (DotNet Execution) runtime other than dnx451 (i.e. dnx452, dnx46) you will run into the following error ]]>
    </summary>
    
      <category term="ASP.NET" scheme="http://jameschambers.com/tags/ASP-NET/"/>
    
      <category term="MVC" scheme="http://jameschambers.com/tags/MVC/"/>
    
      <category term="Visual Studio 2015" scheme="http://jameschambers.com/tags/Visual-Studio-2015/"/>
    
      <category term="Code Dive" scheme="http://jameschambers.com/categories/Code-Dive/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How Do You Measure Up? Find out in 60 Days!]]></title>
    <link href="http://jameschambers.com/2015/07/how-do-you-measure-up-find-out-in-60-days/"/>
    <id>http://jameschambers.com/2015/07/how-do-you-measure-up-find-out-in-60-days/</id>
    <published>2015-07-29T14:32:00.000Z</published>
    <updated>2016-01-20T03:26:06.004Z</updated>
    <content type="html"><![CDATA[<p>I am super geeked to be heading down to Austin, TX to speak at <a href="http://measureup.io/" target="_blank" rel="external">Measure Up</a> this coming September 26th. Measure Up 2015 is the inaugural skills and career development conference put on by the folks at <a href="http://clear-measure.com/" target="_blank" rel="external">Clear Measure</a>.</p>
<p><a href="http://measureup.io/" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net/img/2015/07/image24.png" alt="image" title="image"></a></p>
<p>This conference is packed with all kinds of great speakers and covers a variety of topics related to business development, dev ops, personal growth and, of course, how to be mind-bendingly awesome at making software. I am going to be talking about the things you need to know when <a href="http://measureup2015.azurewebsites.net/mvc6/" target="_blank" rel="external">you’re moving to MVC 6</a>, and sharing about my experiences as <a href="http://measureup2015.azurewebsites.net/success-as-a-remote-worker/" target="_blank" rel="external">a remote worker</a>.</p>
<h2 id="If_You_Live_in_the_Austin_Area_u2026"><a href="#If_You_Live_in_the_Austin_Area_u2026" class="headerlink" title="If You Live in the Austin Area…"></a>If You Live in the Austin Area…</h2><p>…you have no excuses to miss this event. Register <em><u>today</u></em>, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank" rel="external">it’s only $10</a>, and dedicate one day this year to getting yourself closer to your dream career.</p>
<h2 id="If_You_Don_u2019t_Live_in_the_Austin_Area_u2026"><a href="#If_You_Don_u2019t_Live_in_the_Austin_Area_u2026" class="headerlink" title="If You Don’t Live in the Austin Area…"></a>If You Don’t Live in the Austin Area…</h2><p>…you should probably talk to your boss about getting down there for the day. It’s hard to find a conference with this kind of content and (essentially) only have to pay for a bit of travel, perhaps a hotel room. Professional development does not come with this value for this little.</p>
<h2 id="So_2C_What_Are_You_Waiting_For_3F"><a href="#So_2C_What_Are_You_Waiting_For_3F" class="headerlink" title="So, What Are You Waiting For?"></a>So, What Are You Waiting For?</h2><p><strong>Check out the conference agenda</strong>. Dev ops, docker. vNext, continuous deployment, load testing, microsevices, infrastructure as code <a href="http://measureup2015.azurewebsites.net/speakers/" target="_blank" rel="external">and more</a>. </p>
<p><strong>Register for the event</strong>. Seriously, <a href="https://www.eventbrite.com/e/measureup-2015-tickets-16666653409?ref=ecount" target="_blank" rel="external">ten bucks</a><em>. </em></p>
<p>See you in September! ‘Til then, happy coding! <img src="https://jcblogimages.blob.core.windows.net/img/2015/07/wlEmoticon-smile6.png" alt="Smile"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I am super geeked to be heading down to Austin, TX to speak at <a href="http://measureup.io/" target="_blank" rel="external">Measure Up</]]>
    </summary>
    
      <category term="MeasureUp" scheme="http://jameschambers.com/tags/MeasureUp/"/>
    
      <category term="Conferences" scheme="http://jameschambers.com/categories/Conferences/"/>
    
  </entry>
  
</feed>
